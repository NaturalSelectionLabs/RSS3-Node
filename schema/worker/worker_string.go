// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package worker

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "coremirrorfarcasterrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

var _WorkerIndex = [...]uint8{0, 4, 10, 19, 23, 32, 39, 47, 55, 65, 69, 78, 85, 91, 100, 104, 110, 114, 123, 126, 133, 142, 146, 149, 157, 162}

const _WorkerLowerName = "coremirrorfarcasterrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

func (i Worker) String() string {
	if i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Core-(0)]
	_ = x[Mirror-(1)]
	_ = x[Farcaster-(2)]
	_ = x[RSS3-(3)]
	_ = x[Paragraph-(4)]
	_ = x[OpenSea-(5)]
	_ = x[Uniswap-(6)]
	_ = x[Optimism-(7)]
	_ = x[Aavegotchi-(8)]
	_ = x[Lens-(9)]
	_ = x[Looksrare-(10)]
	_ = x[Matters-(11)]
	_ = x[Momoka-(12)]
	_ = x[Highlight-(13)]
	_ = x[Aave-(14)]
	_ = x[IQWiki-(15)]
	_ = x[Lido-(16)]
	_ = x[Crossbell-(17)]
	_ = x[ENS-(18)]
	_ = x[Oneinch-(19)]
	_ = x[KiwiStand-(20)]
	_ = x[SAVM-(21)]
	_ = x[VSL-(22)]
	_ = x[Stargate-(23)]
	_ = x[Curve-(24)]
}

var _WorkerValues = []Worker{Core, Mirror, Farcaster, RSS3, Paragraph, OpenSea, Uniswap, Optimism, Aavegotchi, Lens, Looksrare, Matters, Momoka, Highlight, Aave, IQWiki, Lido, Crossbell, ENS, Oneinch, KiwiStand, SAVM, VSL, Stargate, Curve}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Core,
	_WorkerLowerName[0:4]:     Core,
	_WorkerName[4:10]:         Mirror,
	_WorkerLowerName[4:10]:    Mirror,
	_WorkerName[10:19]:        Farcaster,
	_WorkerLowerName[10:19]:   Farcaster,
	_WorkerName[19:23]:        RSS3,
	_WorkerLowerName[19:23]:   RSS3,
	_WorkerName[23:32]:        Paragraph,
	_WorkerLowerName[23:32]:   Paragraph,
	_WorkerName[32:39]:        OpenSea,
	_WorkerLowerName[32:39]:   OpenSea,
	_WorkerName[39:47]:        Uniswap,
	_WorkerLowerName[39:47]:   Uniswap,
	_WorkerName[47:55]:        Optimism,
	_WorkerLowerName[47:55]:   Optimism,
	_WorkerName[55:65]:        Aavegotchi,
	_WorkerLowerName[55:65]:   Aavegotchi,
	_WorkerName[65:69]:        Lens,
	_WorkerLowerName[65:69]:   Lens,
	_WorkerName[69:78]:        Looksrare,
	_WorkerLowerName[69:78]:   Looksrare,
	_WorkerName[78:85]:        Matters,
	_WorkerLowerName[78:85]:   Matters,
	_WorkerName[85:91]:        Momoka,
	_WorkerLowerName[85:91]:   Momoka,
	_WorkerName[91:100]:       Highlight,
	_WorkerLowerName[91:100]:  Highlight,
	_WorkerName[100:104]:      Aave,
	_WorkerLowerName[100:104]: Aave,
	_WorkerName[104:110]:      IQWiki,
	_WorkerLowerName[104:110]: IQWiki,
	_WorkerName[110:114]:      Lido,
	_WorkerLowerName[110:114]: Lido,
	_WorkerName[114:123]:      Crossbell,
	_WorkerLowerName[114:123]: Crossbell,
	_WorkerName[123:126]:      ENS,
	_WorkerLowerName[123:126]: ENS,
	_WorkerName[126:133]:      Oneinch,
	_WorkerLowerName[126:133]: Oneinch,
	_WorkerName[133:142]:      KiwiStand,
	_WorkerLowerName[133:142]: KiwiStand,
	_WorkerName[142:146]:      SAVM,
	_WorkerLowerName[142:146]: SAVM,
	_WorkerName[146:149]:      VSL,
	_WorkerLowerName[146:149]: VSL,
	_WorkerName[149:157]:      Stargate,
	_WorkerLowerName[149:157]: Stargate,
	_WorkerName[157:162]:      Curve,
	_WorkerLowerName[157:162]: Curve,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:10],
	_WorkerName[10:19],
	_WorkerName[19:23],
	_WorkerName[23:32],
	_WorkerName[32:39],
	_WorkerName[39:47],
	_WorkerName[47:55],
	_WorkerName[55:65],
	_WorkerName[65:69],
	_WorkerName[69:78],
	_WorkerName[78:85],
	_WorkerName[85:91],
	_WorkerName[91:100],
	_WorkerName[100:104],
	_WorkerName[104:110],
	_WorkerName[110:114],
	_WorkerName[114:123],
	_WorkerName[123:126],
	_WorkerName[126:133],
	_WorkerName[133:142],
	_WorkerName[142:146],
	_WorkerName[146:149],
	_WorkerName[149:157],
	_WorkerName[157:162],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
