// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package worker

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "coremirrorrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

var _WorkerIndex = [...]uint8{0, 4, 10, 14, 23, 30, 38, 46, 56, 60, 69, 76, 82, 91, 95, 101, 105, 114, 117, 124, 133, 137, 140, 148, 153}

const _WorkerLowerName = "coremirrorrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

func (i Worker) String() string {
	if i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Core-(0)]
	_ = x[Mirror-(1)]
	_ = x[RSS3-(2)]
	_ = x[Paragraph-(3)]
	_ = x[OpenSea-(4)]
	_ = x[Uniswap-(5)]
	_ = x[Optimism-(6)]
	_ = x[Aavegotchi-(7)]
	_ = x[Lens-(8)]
	_ = x[Looksrare-(9)]
	_ = x[Matters-(10)]
	_ = x[Momoka-(11)]
	_ = x[Highlight-(12)]
	_ = x[Aave-(13)]
	_ = x[IQWiki-(14)]
	_ = x[Lido-(15)]
	_ = x[Crossbell-(16)]
	_ = x[ENS-(17)]
	_ = x[Oneinch-(18)]
	_ = x[KiwiStand-(19)]
	_ = x[SAVM-(20)]
	_ = x[VSL-(21)]
	_ = x[Stargate-(22)]
	_ = x[Curve-(23)]
}

var _WorkerValues = []Worker{Core, Mirror, RSS3, Paragraph, OpenSea, Uniswap, Optimism, Aavegotchi, Lens, Looksrare, Matters, Momoka, Highlight, Aave, IQWiki, Lido, Crossbell, ENS, Oneinch, KiwiStand, SAVM, VSL, Stargate, Curve}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Core,
	_WorkerLowerName[0:4]:     Core,
	_WorkerName[4:10]:         Mirror,
	_WorkerLowerName[4:10]:    Mirror,
	_WorkerName[10:14]:        RSS3,
	_WorkerLowerName[10:14]:   RSS3,
	_WorkerName[14:23]:        Paragraph,
	_WorkerLowerName[14:23]:   Paragraph,
	_WorkerName[23:30]:        OpenSea,
	_WorkerLowerName[23:30]:   OpenSea,
	_WorkerName[30:38]:        Uniswap,
	_WorkerLowerName[30:38]:   Uniswap,
	_WorkerName[38:46]:        Optimism,
	_WorkerLowerName[38:46]:   Optimism,
	_WorkerName[46:56]:        Aavegotchi,
	_WorkerLowerName[46:56]:   Aavegotchi,
	_WorkerName[56:60]:        Lens,
	_WorkerLowerName[56:60]:   Lens,
	_WorkerName[60:69]:        Looksrare,
	_WorkerLowerName[60:69]:   Looksrare,
	_WorkerName[69:76]:        Matters,
	_WorkerLowerName[69:76]:   Matters,
	_WorkerName[76:82]:        Momoka,
	_WorkerLowerName[76:82]:   Momoka,
	_WorkerName[82:91]:        Highlight,
	_WorkerLowerName[82:91]:   Highlight,
	_WorkerName[91:95]:        Aave,
	_WorkerLowerName[91:95]:   Aave,
	_WorkerName[95:101]:       IQWiki,
	_WorkerLowerName[95:101]:  IQWiki,
	_WorkerName[101:105]:      Lido,
	_WorkerLowerName[101:105]: Lido,
	_WorkerName[105:114]:      Crossbell,
	_WorkerLowerName[105:114]: Crossbell,
	_WorkerName[114:117]:      ENS,
	_WorkerLowerName[114:117]: ENS,
	_WorkerName[117:124]:      Oneinch,
	_WorkerLowerName[117:124]: Oneinch,
	_WorkerName[124:133]:      KiwiStand,
	_WorkerLowerName[124:133]: KiwiStand,
	_WorkerName[133:137]:      SAVM,
	_WorkerLowerName[133:137]: SAVM,
	_WorkerName[137:140]:      VSL,
	_WorkerLowerName[137:140]: VSL,
	_WorkerName[140:148]:      Stargate,
	_WorkerLowerName[140:148]: Stargate,
	_WorkerName[148:153]:      Curve,
	_WorkerLowerName[148:153]: Curve,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:10],
	_WorkerName[10:14],
	_WorkerName[14:23],
	_WorkerName[23:30],
	_WorkerName[30:38],
	_WorkerName[38:46],
	_WorkerName[46:56],
	_WorkerName[56:60],
	_WorkerName[60:69],
	_WorkerName[69:76],
	_WorkerName[76:82],
	_WorkerName[82:91],
	_WorkerName[91:95],
	_WorkerName[95:101],
	_WorkerName[101:105],
	_WorkerName[105:114],
	_WorkerName[114:117],
	_WorkerName[117:124],
	_WorkerName[124:133],
	_WorkerName[133:137],
	_WorkerName[137:140],
	_WorkerName[140:148],
	_WorkerName[148:153],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
