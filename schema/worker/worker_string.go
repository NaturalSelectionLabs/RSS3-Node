// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package worker

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "fallbackmirrorfarcasterrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

var _WorkerIndex = [...]uint8{0, 8, 14, 23, 27, 36, 43, 51, 59, 69, 73, 82, 89, 95, 104, 108, 114, 118, 127, 130, 137, 146, 150, 153, 161, 166}

const _WorkerLowerName = "fallbackmirrorfarcasterrss3paragraphopenseauniswapzoptimismaavegotchilenslooksraremattersmomokahighlightaaveiqwikilidocrossbellensoneinchkiwistandsavmvslstargatecurve"

func (i Worker) String() string {
	if i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Fallback-(0)]
	_ = x[Mirror-(1)]
	_ = x[Farcaster-(2)]
	_ = x[RSS3-(3)]
	_ = x[Paragraph-(4)]
	_ = x[OpenSea-(5)]
	_ = x[Uniswap-(6)]
	_ = x[Optimism-(7)]
	_ = x[Aavegotchi-(8)]
	_ = x[Lens-(9)]
	_ = x[Looksrare-(10)]
	_ = x[Matters-(11)]
	_ = x[Momoka-(12)]
	_ = x[Highlight-(13)]
	_ = x[Aave-(14)]
	_ = x[IQWiki-(15)]
	_ = x[Lido-(16)]
	_ = x[Crossbell-(17)]
	_ = x[ENS-(18)]
	_ = x[Oneinch-(19)]
	_ = x[KiwiStand-(20)]
	_ = x[SAVM-(21)]
	_ = x[VSL-(22)]
	_ = x[Stargate-(23)]
	_ = x[Curve-(24)]
}

var _WorkerValues = []Worker{Fallback, Mirror, Farcaster, RSS3, Paragraph, OpenSea, Uniswap, Optimism, Aavegotchi, Lens, Looksrare, Matters, Momoka, Highlight, Aave, IQWiki, Lido, Crossbell, ENS, Oneinch, KiwiStand, SAVM, VSL, Stargate, Curve}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:8]:          Fallback,
	_WorkerLowerName[0:8]:     Fallback,
	_WorkerName[8:14]:         Mirror,
	_WorkerLowerName[8:14]:    Mirror,
	_WorkerName[14:23]:        Farcaster,
	_WorkerLowerName[14:23]:   Farcaster,
	_WorkerName[23:27]:        RSS3,
	_WorkerLowerName[23:27]:   RSS3,
	_WorkerName[27:36]:        Paragraph,
	_WorkerLowerName[27:36]:   Paragraph,
	_WorkerName[36:43]:        OpenSea,
	_WorkerLowerName[36:43]:   OpenSea,
	_WorkerName[43:51]:        Uniswap,
	_WorkerLowerName[43:51]:   Uniswap,
	_WorkerName[51:59]:        Optimism,
	_WorkerLowerName[51:59]:   Optimism,
	_WorkerName[59:69]:        Aavegotchi,
	_WorkerLowerName[59:69]:   Aavegotchi,
	_WorkerName[69:73]:        Lens,
	_WorkerLowerName[69:73]:   Lens,
	_WorkerName[73:82]:        Looksrare,
	_WorkerLowerName[73:82]:   Looksrare,
	_WorkerName[82:89]:        Matters,
	_WorkerLowerName[82:89]:   Matters,
	_WorkerName[89:95]:        Momoka,
	_WorkerLowerName[89:95]:   Momoka,
	_WorkerName[95:104]:       Highlight,
	_WorkerLowerName[95:104]:  Highlight,
	_WorkerName[104:108]:      Aave,
	_WorkerLowerName[104:108]: Aave,
	_WorkerName[108:114]:      IQWiki,
	_WorkerLowerName[108:114]: IQWiki,
	_WorkerName[114:118]:      Lido,
	_WorkerLowerName[114:118]: Lido,
	_WorkerName[118:127]:      Crossbell,
	_WorkerLowerName[118:127]: Crossbell,
	_WorkerName[127:130]:      ENS,
	_WorkerLowerName[127:130]: ENS,
	_WorkerName[130:137]:      Oneinch,
	_WorkerLowerName[130:137]: Oneinch,
	_WorkerName[137:146]:      KiwiStand,
	_WorkerLowerName[137:146]: KiwiStand,
	_WorkerName[146:150]:      SAVM,
	_WorkerLowerName[146:150]: SAVM,
	_WorkerName[150:153]:      VSL,
	_WorkerLowerName[150:153]: VSL,
	_WorkerName[153:161]:      Stargate,
	_WorkerLowerName[153:161]: Stargate,
	_WorkerName[161:166]:      Curve,
	_WorkerLowerName[161:166]: Curve,
}

var _WorkerNames = []string{
	_WorkerName[0:8],
	_WorkerName[8:14],
	_WorkerName[14:23],
	_WorkerName[23:27],
	_WorkerName[27:36],
	_WorkerName[36:43],
	_WorkerName[43:51],
	_WorkerName[51:59],
	_WorkerName[59:69],
	_WorkerName[69:73],
	_WorkerName[73:82],
	_WorkerName[82:89],
	_WorkerName[89:95],
	_WorkerName[95:104],
	_WorkerName[104:108],
	_WorkerName[108:114],
	_WorkerName[114:118],
	_WorkerName[118:127],
	_WorkerName[127:130],
	_WorkerName[130:137],
	_WorkerName[137:146],
	_WorkerName[146:150],
	_WorkerName[150:153],
	_WorkerName[153:161],
	_WorkerName[161:166],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
