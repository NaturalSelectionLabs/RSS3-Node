// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "aaveaavegotchiarbitrumbasebenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolinealinearlooksraremattersmirrormomokanearsocialnouns1inchopenseaoptimismparagraphparaswappolymarketrainbowrss3savmstargateuniswapvslzerion"

var _WorkerIndex = [...]uint8{0, 4, 14, 22, 26, 33, 37, 40, 49, 54, 57, 66, 72, 81, 85, 89, 94, 100, 109, 116, 122, 128, 138, 143, 148, 155, 163, 172, 180, 190, 197, 201, 205, 213, 220, 223, 229}

const _WorkerLowerName = "aaveaavegotchiarbitrumbasebenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolinealinearlooksraremattersmirrormomokanearsocialnouns1inchopenseaoptimismparagraphparaswappolymarketrainbowrss3savmstargateuniswapvslzerion"

func (i Worker) String() string {
	i -= 1
	if i < 0 || i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i+1)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Aave-(1)]
	_ = x[Aavegotchi-(2)]
	_ = x[Arbitrum-(3)]
	_ = x[Base-(4)]
	_ = x[BendDAO-(5)]
	_ = x[Core-(6)]
	_ = x[Cow-(7)]
	_ = x[Crossbell-(8)]
	_ = x[Curve-(9)]
	_ = x[ENS-(10)]
	_ = x[Highlight-(11)]
	_ = x[IQWiki-(12)]
	_ = x[KiwiStand-(13)]
	_ = x[Lens-(14)]
	_ = x[Lido-(15)]
	_ = x[Linea-(16)]
	_ = x[LiNEAR-(17)]
	_ = x[Looksrare-(18)]
	_ = x[Matters-(19)]
	_ = x[Mirror-(20)]
	_ = x[Momoka-(21)]
	_ = x[NearSocial-(22)]
	_ = x[Nouns-(23)]
	_ = x[Oneinch-(24)]
	_ = x[OpenSea-(25)]
	_ = x[Optimism-(26)]
	_ = x[Paragraph-(27)]
	_ = x[Paraswap-(28)]
	_ = x[Polymarket-(29)]
	_ = x[Rainbow-(30)]
	_ = x[RSS3-(31)]
	_ = x[SAVM-(32)]
	_ = x[Stargate-(33)]
	_ = x[Uniswap-(34)]
	_ = x[VSL-(35)]
	_ = x[Zerion-(36)]
}

var _WorkerValues = []Worker{Aave, Aavegotchi, Arbitrum, Base, BendDAO, Core, Cow, Crossbell, Curve, ENS, Highlight, IQWiki, KiwiStand, Lens, Lido, Linea, LiNEAR, Looksrare, Matters, Mirror, Momoka, NearSocial, Nouns, Oneinch, OpenSea, Optimism, Paragraph, Paraswap, Polymarket, Rainbow, RSS3, SAVM, Stargate, Uniswap, VSL, Zerion}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Aave,
	_WorkerLowerName[0:4]:     Aave,
	_WorkerName[4:14]:         Aavegotchi,
	_WorkerLowerName[4:14]:    Aavegotchi,
	_WorkerName[14:22]:        Arbitrum,
	_WorkerLowerName[14:22]:   Arbitrum,
	_WorkerName[22:26]:        Base,
	_WorkerLowerName[22:26]:   Base,
	_WorkerName[26:33]:        BendDAO,
	_WorkerLowerName[26:33]:   BendDAO,
	_WorkerName[33:37]:        Core,
	_WorkerLowerName[33:37]:   Core,
	_WorkerName[37:40]:        Cow,
	_WorkerLowerName[37:40]:   Cow,
	_WorkerName[40:49]:        Crossbell,
	_WorkerLowerName[40:49]:   Crossbell,
	_WorkerName[49:54]:        Curve,
	_WorkerLowerName[49:54]:   Curve,
	_WorkerName[54:57]:        ENS,
	_WorkerLowerName[54:57]:   ENS,
	_WorkerName[57:66]:        Highlight,
	_WorkerLowerName[57:66]:   Highlight,
	_WorkerName[66:72]:        IQWiki,
	_WorkerLowerName[66:72]:   IQWiki,
	_WorkerName[72:81]:        KiwiStand,
	_WorkerLowerName[72:81]:   KiwiStand,
	_WorkerName[81:85]:        Lens,
	_WorkerLowerName[81:85]:   Lens,
	_WorkerName[85:89]:        Lido,
	_WorkerLowerName[85:89]:   Lido,
	_WorkerName[89:94]:        Linea,
	_WorkerLowerName[89:94]:   Linea,
	_WorkerName[94:100]:       LiNEAR,
	_WorkerLowerName[94:100]:  LiNEAR,
	_WorkerName[100:109]:      Looksrare,
	_WorkerLowerName[100:109]: Looksrare,
	_WorkerName[109:116]:      Matters,
	_WorkerLowerName[109:116]: Matters,
	_WorkerName[116:122]:      Mirror,
	_WorkerLowerName[116:122]: Mirror,
	_WorkerName[122:128]:      Momoka,
	_WorkerLowerName[122:128]: Momoka,
	_WorkerName[128:138]:      NearSocial,
	_WorkerLowerName[128:138]: NearSocial,
	_WorkerName[138:143]:      Nouns,
	_WorkerLowerName[138:143]: Nouns,
	_WorkerName[143:148]:      Oneinch,
	_WorkerLowerName[143:148]: Oneinch,
	_WorkerName[148:155]:      OpenSea,
	_WorkerLowerName[148:155]: OpenSea,
	_WorkerName[155:163]:      Optimism,
	_WorkerLowerName[155:163]: Optimism,
	_WorkerName[163:172]:      Paragraph,
	_WorkerLowerName[163:172]: Paragraph,
	_WorkerName[172:180]:      Paraswap,
	_WorkerLowerName[172:180]: Paraswap,
	_WorkerName[180:190]:      Polymarket,
	_WorkerLowerName[180:190]: Polymarket,
	_WorkerName[190:197]:      Rainbow,
	_WorkerLowerName[190:197]: Rainbow,
	_WorkerName[197:201]:      RSS3,
	_WorkerLowerName[197:201]: RSS3,
	_WorkerName[201:205]:      SAVM,
	_WorkerLowerName[201:205]: SAVM,
	_WorkerName[205:213]:      Stargate,
	_WorkerLowerName[205:213]: Stargate,
	_WorkerName[213:220]:      Uniswap,
	_WorkerLowerName[213:220]: Uniswap,
	_WorkerName[220:223]:      VSL,
	_WorkerLowerName[220:223]: VSL,
	_WorkerName[223:229]:      Zerion,
	_WorkerLowerName[223:229]: Zerion,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:14],
	_WorkerName[14:22],
	_WorkerName[22:26],
	_WorkerName[26:33],
	_WorkerName[33:37],
	_WorkerName[37:40],
	_WorkerName[40:49],
	_WorkerName[49:54],
	_WorkerName[54:57],
	_WorkerName[57:66],
	_WorkerName[66:72],
	_WorkerName[72:81],
	_WorkerName[81:85],
	_WorkerName[85:89],
	_WorkerName[89:94],
	_WorkerName[94:100],
	_WorkerName[100:109],
	_WorkerName[109:116],
	_WorkerName[116:122],
	_WorkerName[122:128],
	_WorkerName[128:138],
	_WorkerName[138:143],
	_WorkerName[143:148],
	_WorkerName[148:155],
	_WorkerName[155:163],
	_WorkerName[163:172],
	_WorkerName[172:180],
	_WorkerName[180:190],
	_WorkerName[190:197],
	_WorkerName[197:201],
	_WorkerName[201:205],
	_WorkerName[205:213],
	_WorkerName[213:220],
	_WorkerName[220:223],
	_WorkerName[223:229],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
