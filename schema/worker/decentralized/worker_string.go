// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "aaveaavegotchibasearbitrumbenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolooksraremattersmirrormomokanouns1inchopenseaoptimismparagraphparaswaprss3savmstargateuniswapvsl"

var _WorkerIndex = [...]uint8{0, 4, 14, 18, 26, 33, 37, 40, 49, 54, 57, 66, 72, 81, 85, 89, 98, 105, 111, 117, 122, 127, 134, 142, 151, 159, 163, 167, 175, 182, 185}

const _WorkerLowerName = "aaveaavegotchibasearbitrumbenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolooksraremattersmirrormomokanouns1inchopenseaoptimismparagraphparaswaprss3savmstargateuniswapvsl"

func (i Worker) String() string {
	i -= 1
	if i < 0 || i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i+1)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Aave-(1)]
	_ = x[Aavegotchi-(2)]
	_ = x[Base-(3)]
	_ = x[Arbitrum-(4)]
	_ = x[BendDAO-(5)]
	_ = x[Core-(6)]
	_ = x[Cow-(7)]
	_ = x[Crossbell-(8)]
	_ = x[Curve-(9)]
	_ = x[ENS-(10)]
	_ = x[Highlight-(11)]
	_ = x[IQWiki-(12)]
	_ = x[KiwiStand-(13)]
	_ = x[Lens-(14)]
	_ = x[Lido-(15)]
	_ = x[Looksrare-(16)]
	_ = x[Matters-(17)]
	_ = x[Mirror-(18)]
	_ = x[Momoka-(19)]
	_ = x[Nouns-(20)]
	_ = x[Oneinch-(21)]
	_ = x[OpenSea-(22)]
	_ = x[Optimism-(23)]
	_ = x[Paragraph-(24)]
	_ = x[Paraswap-(25)]
	_ = x[RSS3-(26)]
	_ = x[SAVM-(27)]
	_ = x[Stargate-(28)]
	_ = x[Uniswap-(29)]
	_ = x[VSL-(30)]
}

var _WorkerValues = []Worker{Aave, Aavegotchi, Base, Arbitrum, BendDAO, Core, Cow, Crossbell, Curve, ENS, Highlight, IQWiki, KiwiStand, Lens, Lido, Looksrare, Matters, Mirror, Momoka, Nouns, Oneinch, OpenSea, Optimism, Paragraph, Paraswap, RSS3, SAVM, Stargate, Uniswap, VSL}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Aave,
	_WorkerLowerName[0:4]:     Aave,
	_WorkerName[4:14]:         Aavegotchi,
	_WorkerLowerName[4:14]:    Aavegotchi,
	_WorkerName[14:18]:        Base,
	_WorkerLowerName[14:18]:   Base,
	_WorkerName[18:26]:        Arbitrum,
	_WorkerLowerName[18:26]:   Arbitrum,
	_WorkerName[26:33]:        BendDAO,
	_WorkerLowerName[26:33]:   BendDAO,
	_WorkerName[33:37]:        Core,
	_WorkerLowerName[33:37]:   Core,
	_WorkerName[37:40]:        Cow,
	_WorkerLowerName[37:40]:   Cow,
	_WorkerName[40:49]:        Crossbell,
	_WorkerLowerName[40:49]:   Crossbell,
	_WorkerName[49:54]:        Curve,
	_WorkerLowerName[49:54]:   Curve,
	_WorkerName[54:57]:        ENS,
	_WorkerLowerName[54:57]:   ENS,
	_WorkerName[57:66]:        Highlight,
	_WorkerLowerName[57:66]:   Highlight,
	_WorkerName[66:72]:        IQWiki,
	_WorkerLowerName[66:72]:   IQWiki,
	_WorkerName[72:81]:        KiwiStand,
	_WorkerLowerName[72:81]:   KiwiStand,
	_WorkerName[81:85]:        Lens,
	_WorkerLowerName[81:85]:   Lens,
	_WorkerName[85:89]:        Lido,
	_WorkerLowerName[85:89]:   Lido,
	_WorkerName[89:98]:        Looksrare,
	_WorkerLowerName[89:98]:   Looksrare,
	_WorkerName[98:105]:       Matters,
	_WorkerLowerName[98:105]:  Matters,
	_WorkerName[105:111]:      Mirror,
	_WorkerLowerName[105:111]: Mirror,
	_WorkerName[111:117]:      Momoka,
	_WorkerLowerName[111:117]: Momoka,
	_WorkerName[117:122]:      Nouns,
	_WorkerLowerName[117:122]: Nouns,
	_WorkerName[122:127]:      Oneinch,
	_WorkerLowerName[122:127]: Oneinch,
	_WorkerName[127:134]:      OpenSea,
	_WorkerLowerName[127:134]: OpenSea,
	_WorkerName[134:142]:      Optimism,
	_WorkerLowerName[134:142]: Optimism,
	_WorkerName[142:151]:      Paragraph,
	_WorkerLowerName[142:151]: Paragraph,
	_WorkerName[151:159]:      Paraswap,
	_WorkerLowerName[151:159]: Paraswap,
	_WorkerName[159:163]:      RSS3,
	_WorkerLowerName[159:163]: RSS3,
	_WorkerName[163:167]:      SAVM,
	_WorkerLowerName[163:167]: SAVM,
	_WorkerName[167:175]:      Stargate,
	_WorkerLowerName[167:175]: Stargate,
	_WorkerName[175:182]:      Uniswap,
	_WorkerLowerName[175:182]: Uniswap,
	_WorkerName[182:185]:      VSL,
	_WorkerLowerName[182:185]: VSL,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:14],
	_WorkerName[14:18],
	_WorkerName[18:26],
	_WorkerName[26:33],
	_WorkerName[33:37],
	_WorkerName[37:40],
	_WorkerName[40:49],
	_WorkerName[49:54],
	_WorkerName[54:57],
	_WorkerName[57:66],
	_WorkerName[66:72],
	_WorkerName[72:81],
	_WorkerName[81:85],
	_WorkerName[85:89],
	_WorkerName[89:98],
	_WorkerName[98:105],
	_WorkerName[105:111],
	_WorkerName[111:117],
	_WorkerName[117:122],
	_WorkerName[122:127],
	_WorkerName[127:134],
	_WorkerName[134:142],
	_WorkerName[142:151],
	_WorkerName[151:159],
	_WorkerName[159:163],
	_WorkerName[163:167],
	_WorkerName[167:175],
	_WorkerName[175:182],
	_WorkerName[182:185],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
