// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "aaveaavegotchibenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolooksraremattersmirrormomoka1inchopenseaoptimismparagraphrss3savmstargateuniswapvsl"

var _WorkerIndex = [...]uint8{0, 4, 14, 21, 25, 28, 37, 42, 45, 54, 60, 69, 73, 77, 86, 93, 99, 105, 110, 117, 125, 134, 138, 142, 150, 157, 160}

const _WorkerLowerName = "aaveaavegotchibenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolooksraremattersmirrormomoka1inchopenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Worker) String() string {
	i -= 1
	if i < 0 || i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i+1)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Aave-(1)]
	_ = x[Aavegotchi-(2)]
	_ = x[BendDAO-(3)]
	_ = x[Core-(4)]
	_ = x[Cow-(5)]
	_ = x[Crossbell-(6)]
	_ = x[Curve-(7)]
	_ = x[ENS-(8)]
	_ = x[Highlight-(9)]
	_ = x[IQWiki-(10)]
	_ = x[KiwiStand-(11)]
	_ = x[Lens-(12)]
	_ = x[Lido-(13)]
	_ = x[Looksrare-(14)]
	_ = x[Matters-(15)]
	_ = x[Mirror-(16)]
	_ = x[Momoka-(17)]
	_ = x[Oneinch-(18)]
	_ = x[OpenSea-(19)]
	_ = x[Optimism-(20)]
	_ = x[Paragraph-(21)]
	_ = x[RSS3-(22)]
	_ = x[SAVM-(23)]
	_ = x[Stargate-(24)]
	_ = x[Uniswap-(25)]
	_ = x[VSL-(26)]
}

var _WorkerValues = []Worker{Aave, Aavegotchi, BendDAO, Core, Cow, Crossbell, Curve, ENS, Highlight, IQWiki, KiwiStand, Lens, Lido, Looksrare, Matters, Mirror, Momoka, Oneinch, OpenSea, Optimism, Paragraph, RSS3, SAVM, Stargate, Uniswap, VSL}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Aave,
	_WorkerLowerName[0:4]:     Aave,
	_WorkerName[4:14]:         Aavegotchi,
	_WorkerLowerName[4:14]:    Aavegotchi,
	_WorkerName[14:21]:        BendDAO,
	_WorkerLowerName[14:21]:   BendDAO,
	_WorkerName[21:25]:        Core,
	_WorkerLowerName[21:25]:   Core,
	_WorkerName[25:28]:        Cow,
	_WorkerLowerName[25:28]:   Cow,
	_WorkerName[28:37]:        Crossbell,
	_WorkerLowerName[28:37]:   Crossbell,
	_WorkerName[37:42]:        Curve,
	_WorkerLowerName[37:42]:   Curve,
	_WorkerName[42:45]:        ENS,
	_WorkerLowerName[42:45]:   ENS,
	_WorkerName[45:54]:        Highlight,
	_WorkerLowerName[45:54]:   Highlight,
	_WorkerName[54:60]:        IQWiki,
	_WorkerLowerName[54:60]:   IQWiki,
	_WorkerName[60:69]:        KiwiStand,
	_WorkerLowerName[60:69]:   KiwiStand,
	_WorkerName[69:73]:        Lens,
	_WorkerLowerName[69:73]:   Lens,
	_WorkerName[73:77]:        Lido,
	_WorkerLowerName[73:77]:   Lido,
	_WorkerName[77:86]:        Looksrare,
	_WorkerLowerName[77:86]:   Looksrare,
	_WorkerName[86:93]:        Matters,
	_WorkerLowerName[86:93]:   Matters,
	_WorkerName[93:99]:        Mirror,
	_WorkerLowerName[93:99]:   Mirror,
	_WorkerName[99:105]:       Momoka,
	_WorkerLowerName[99:105]:  Momoka,
	_WorkerName[105:110]:      Oneinch,
	_WorkerLowerName[105:110]: Oneinch,
	_WorkerName[110:117]:      OpenSea,
	_WorkerLowerName[110:117]: OpenSea,
	_WorkerName[117:125]:      Optimism,
	_WorkerLowerName[117:125]: Optimism,
	_WorkerName[125:134]:      Paragraph,
	_WorkerLowerName[125:134]: Paragraph,
	_WorkerName[134:138]:      RSS3,
	_WorkerLowerName[134:138]: RSS3,
	_WorkerName[138:142]:      SAVM,
	_WorkerLowerName[138:142]: SAVM,
	_WorkerName[142:150]:      Stargate,
	_WorkerLowerName[142:150]: Stargate,
	_WorkerName[150:157]:      Uniswap,
	_WorkerLowerName[150:157]: Uniswap,
	_WorkerName[157:160]:      VSL,
	_WorkerLowerName[157:160]: VSL,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:14],
	_WorkerName[14:21],
	_WorkerName[21:25],
	_WorkerName[25:28],
	_WorkerName[28:37],
	_WorkerName[37:42],
	_WorkerName[42:45],
	_WorkerName[45:54],
	_WorkerName[54:60],
	_WorkerName[60:69],
	_WorkerName[69:73],
	_WorkerName[73:77],
	_WorkerName[77:86],
	_WorkerName[86:93],
	_WorkerName[93:99],
	_WorkerName[99:105],
	_WorkerName[105:110],
	_WorkerName[110:117],
	_WorkerName[117:125],
	_WorkerName[125:134],
	_WorkerName[134:138],
	_WorkerName[138:142],
	_WorkerName[142:150],
	_WorkerName[150:157],
	_WorkerName[157:160],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
