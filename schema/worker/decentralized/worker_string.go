// Code generated by "enumer --values --type=Worker --linecomment --output worker_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerName = "aaveaavegotchiarbitrumbenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolinealooksraremattersmirrormomokanouns1inchopenseaoptimismparagraphparaswaprss3savmstargateuniswapvsl"

var _WorkerIndex = [...]uint8{0, 4, 14, 22, 29, 33, 36, 45, 50, 53, 62, 68, 77, 81, 85, 90, 99, 106, 112, 118, 123, 128, 135, 143, 152, 160, 164, 168, 176, 183, 186}

const _WorkerLowerName = "aaveaavegotchiarbitrumbenddaocorecowcrossbellcurveenshighlightiqwikikiwistandlenslidolinealooksraremattersmirrormomokanouns1inchopenseaoptimismparagraphparaswaprss3savmstargateuniswapvsl"

func (i Worker) String() string {
	i -= 1
	if i < 0 || i >= Worker(len(_WorkerIndex)-1) {
		return fmt.Sprintf("Worker(%d)", i+1)
	}
	return _WorkerName[_WorkerIndex[i]:_WorkerIndex[i+1]]
}

func (Worker) Values() []string {
	return WorkerStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerNoOp() {
	var x [1]struct{}
	_ = x[Aave-(1)]
	_ = x[Aavegotchi-(2)]
	_ = x[Arbitrum-(3)]
	_ = x[BendDAO-(4)]
	_ = x[Core-(5)]
	_ = x[Cow-(6)]
	_ = x[Crossbell-(7)]
	_ = x[Curve-(8)]
	_ = x[ENS-(9)]
	_ = x[Highlight-(10)]
	_ = x[IQWiki-(11)]
	_ = x[KiwiStand-(12)]
	_ = x[Lens-(13)]
	_ = x[Lido-(14)]
	_ = x[Linea-(15)]
	_ = x[Looksrare-(16)]
	_ = x[Matters-(17)]
	_ = x[Mirror-(18)]
	_ = x[Momoka-(19)]
	_ = x[Nouns-(20)]
	_ = x[Oneinch-(21)]
	_ = x[OpenSea-(22)]
	_ = x[Optimism-(23)]
	_ = x[Paragraph-(24)]
	_ = x[Paraswap-(25)]
	_ = x[RSS3-(26)]
	_ = x[SAVM-(27)]
	_ = x[Stargate-(28)]
	_ = x[Uniswap-(29)]
	_ = x[VSL-(30)]
}

var _WorkerValues = []Worker{Aave, Aavegotchi, Arbitrum, BendDAO, Core, Cow, Crossbell, Curve, ENS, Highlight, IQWiki, KiwiStand, Lens, Lido, Linea, Looksrare, Matters, Mirror, Momoka, Nouns, Oneinch, OpenSea, Optimism, Paragraph, Paraswap, RSS3, SAVM, Stargate, Uniswap, VSL}

var _WorkerNameToValueMap = map[string]Worker{
	_WorkerName[0:4]:          Aave,
	_WorkerLowerName[0:4]:     Aave,
	_WorkerName[4:14]:         Aavegotchi,
	_WorkerLowerName[4:14]:    Aavegotchi,
	_WorkerName[14:22]:        Arbitrum,
	_WorkerLowerName[14:22]:   Arbitrum,
	_WorkerName[22:29]:        BendDAO,
	_WorkerLowerName[22:29]:   BendDAO,
	_WorkerName[29:33]:        Core,
	_WorkerLowerName[29:33]:   Core,
	_WorkerName[33:36]:        Cow,
	_WorkerLowerName[33:36]:   Cow,
	_WorkerName[36:45]:        Crossbell,
	_WorkerLowerName[36:45]:   Crossbell,
	_WorkerName[45:50]:        Curve,
	_WorkerLowerName[45:50]:   Curve,
	_WorkerName[50:53]:        ENS,
	_WorkerLowerName[50:53]:   ENS,
	_WorkerName[53:62]:        Highlight,
	_WorkerLowerName[53:62]:   Highlight,
	_WorkerName[62:68]:        IQWiki,
	_WorkerLowerName[62:68]:   IQWiki,
	_WorkerName[68:77]:        KiwiStand,
	_WorkerLowerName[68:77]:   KiwiStand,
	_WorkerName[77:81]:        Lens,
	_WorkerLowerName[77:81]:   Lens,
	_WorkerName[81:85]:        Lido,
	_WorkerLowerName[81:85]:   Lido,
	_WorkerName[85:90]:        Linea,
	_WorkerLowerName[85:90]:   Linea,
	_WorkerName[90:99]:        Looksrare,
	_WorkerLowerName[90:99]:   Looksrare,
	_WorkerName[99:106]:       Matters,
	_WorkerLowerName[99:106]:  Matters,
	_WorkerName[106:112]:      Mirror,
	_WorkerLowerName[106:112]: Mirror,
	_WorkerName[112:118]:      Momoka,
	_WorkerLowerName[112:118]: Momoka,
	_WorkerName[118:123]:      Nouns,
	_WorkerLowerName[118:123]: Nouns,
	_WorkerName[123:128]:      Oneinch,
	_WorkerLowerName[123:128]: Oneinch,
	_WorkerName[128:135]:      OpenSea,
	_WorkerLowerName[128:135]: OpenSea,
	_WorkerName[135:143]:      Optimism,
	_WorkerLowerName[135:143]: Optimism,
	_WorkerName[143:152]:      Paragraph,
	_WorkerLowerName[143:152]: Paragraph,
	_WorkerName[152:160]:      Paraswap,
	_WorkerLowerName[152:160]: Paraswap,
	_WorkerName[160:164]:      RSS3,
	_WorkerLowerName[160:164]: RSS3,
	_WorkerName[164:168]:      SAVM,
	_WorkerLowerName[164:168]: SAVM,
	_WorkerName[168:176]:      Stargate,
	_WorkerLowerName[168:176]: Stargate,
	_WorkerName[176:183]:      Uniswap,
	_WorkerLowerName[176:183]: Uniswap,
	_WorkerName[183:186]:      VSL,
	_WorkerLowerName[183:186]: VSL,
}

var _WorkerNames = []string{
	_WorkerName[0:4],
	_WorkerName[4:14],
	_WorkerName[14:22],
	_WorkerName[22:29],
	_WorkerName[29:33],
	_WorkerName[33:36],
	_WorkerName[36:45],
	_WorkerName[45:50],
	_WorkerName[50:53],
	_WorkerName[53:62],
	_WorkerName[62:68],
	_WorkerName[68:77],
	_WorkerName[77:81],
	_WorkerName[81:85],
	_WorkerName[85:90],
	_WorkerName[90:99],
	_WorkerName[99:106],
	_WorkerName[106:112],
	_WorkerName[112:118],
	_WorkerName[118:123],
	_WorkerName[123:128],
	_WorkerName[128:135],
	_WorkerName[135:143],
	_WorkerName[143:152],
	_WorkerName[152:160],
	_WorkerName[160:164],
	_WorkerName[164:168],
	_WorkerName[168:176],
	_WorkerName[176:183],
	_WorkerName[183:186],
}

// WorkerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerString(s string) (Worker, error) {
	if val, ok := _WorkerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Worker values", s)
}

// WorkerValues returns all values of the enum
func WorkerValues() []Worker {
	return _WorkerValues
}

// WorkerStrings returns a slice of all String values of the enum
func WorkerStrings() []string {
	strs := make([]string, len(_WorkerNames))
	copy(strs, _WorkerNames)
	return strs
}

// IsAWorker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Worker) IsAWorker() bool {
	for _, v := range _WorkerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Worker
func (i Worker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Worker
func (i *Worker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Worker should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Worker
func (i Worker) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Worker
func (i *Worker) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = WorkerString(s)
	return err
}

func (i Worker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Worker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Worker: %[1]T(%[1]v)", value)
	}

	val, err := WorkerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
