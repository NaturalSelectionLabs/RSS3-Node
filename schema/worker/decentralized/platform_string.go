// Code generated by "enumer --values --type=Platform --linecomment --output platform_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PlatformName = "Unknown1inchAAVEAavegotchiBendDAOCrossbellCurveENSFarcasterHighlightIQWikiKiwiStandLensLidoLooksRareMattersMirrorOpenSeaOptimismParagraphRSS3SAVMStargateUniswapVSL"

var _PlatformIndex = [...]uint8{0, 7, 12, 16, 26, 33, 42, 47, 50, 59, 68, 74, 83, 87, 91, 100, 107, 113, 120, 128, 137, 141, 145, 153, 160, 163}

const _PlatformLowerName = "unknown1inchaaveaavegotchibenddaocrossbellcurveensfarcasterhighlightiqwikikiwistandlenslidolooksraremattersmirroropenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Platform) String() string {
	if i >= Platform(len(_PlatformIndex)-1) {
		return fmt.Sprintf("Platform(%d)", i)
	}
	return _PlatformName[_PlatformIndex[i]:_PlatformIndex[i+1]]
}

func (Platform) Values() []string {
	return PlatformStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlatformNoOp() {
	var x [1]struct{}
	_ = x[PlatformUnknown-(0)]
	_ = x[Platform1Inch-(1)]
	_ = x[PlatformAAVE-(2)]
	_ = x[PlatformAavegotchi-(3)]
	_ = x[PlatformBendDAO-(4)]
	_ = x[PlatformCrossbell-(5)]
	_ = x[PlatformCurve-(6)]
	_ = x[PlatformENS-(7)]
	_ = x[PlatformFarcaster-(8)]
	_ = x[PlatformHighlight-(9)]
	_ = x[PlatformIQWiki-(10)]
	_ = x[PlatformKiwiStand-(11)]
	_ = x[PlatformLens-(12)]
	_ = x[PlatformLido-(13)]
	_ = x[PlatformLooksRare-(14)]
	_ = x[PlatformMatters-(15)]
	_ = x[PlatformMirror-(16)]
	_ = x[PlatformOpenSea-(17)]
	_ = x[PlatformOptimism-(18)]
	_ = x[PlatformParagraph-(19)]
	_ = x[PlatformRSS3-(20)]
	_ = x[PlatformSAVM-(21)]
	_ = x[PlatformStargate-(22)]
	_ = x[PlatformUniswap-(23)]
	_ = x[PlatformVSL-(24)]
}

var _PlatformValues = []Platform{PlatformUnknown, Platform1Inch, PlatformAAVE, PlatformAavegotchi, PlatformBendDAO, PlatformCrossbell, PlatformCurve, PlatformENS, PlatformFarcaster, PlatformHighlight, PlatformIQWiki, PlatformKiwiStand, PlatformLens, PlatformLido, PlatformLooksRare, PlatformMatters, PlatformMirror, PlatformOpenSea, PlatformOptimism, PlatformParagraph, PlatformRSS3, PlatformSAVM, PlatformStargate, PlatformUniswap, PlatformVSL}

var _PlatformNameToValueMap = map[string]Platform{
	_PlatformName[0:7]:          PlatformUnknown,
	_PlatformLowerName[0:7]:     PlatformUnknown,
	_PlatformName[7:12]:         Platform1Inch,
	_PlatformLowerName[7:12]:    Platform1Inch,
	_PlatformName[12:16]:        PlatformAAVE,
	_PlatformLowerName[12:16]:   PlatformAAVE,
	_PlatformName[16:26]:        PlatformAavegotchi,
	_PlatformLowerName[16:26]:   PlatformAavegotchi,
	_PlatformName[26:33]:        PlatformBendDAO,
	_PlatformLowerName[26:33]:   PlatformBendDAO,
	_PlatformName[33:42]:        PlatformCrossbell,
	_PlatformLowerName[33:42]:   PlatformCrossbell,
	_PlatformName[42:47]:        PlatformCurve,
	_PlatformLowerName[42:47]:   PlatformCurve,
	_PlatformName[47:50]:        PlatformENS,
	_PlatformLowerName[47:50]:   PlatformENS,
	_PlatformName[50:59]:        PlatformFarcaster,
	_PlatformLowerName[50:59]:   PlatformFarcaster,
	_PlatformName[59:68]:        PlatformHighlight,
	_PlatformLowerName[59:68]:   PlatformHighlight,
	_PlatformName[68:74]:        PlatformIQWiki,
	_PlatformLowerName[68:74]:   PlatformIQWiki,
	_PlatformName[74:83]:        PlatformKiwiStand,
	_PlatformLowerName[74:83]:   PlatformKiwiStand,
	_PlatformName[83:87]:        PlatformLens,
	_PlatformLowerName[83:87]:   PlatformLens,
	_PlatformName[87:91]:        PlatformLido,
	_PlatformLowerName[87:91]:   PlatformLido,
	_PlatformName[91:100]:       PlatformLooksRare,
	_PlatformLowerName[91:100]:  PlatformLooksRare,
	_PlatformName[100:107]:      PlatformMatters,
	_PlatformLowerName[100:107]: PlatformMatters,
	_PlatformName[107:113]:      PlatformMirror,
	_PlatformLowerName[107:113]: PlatformMirror,
	_PlatformName[113:120]:      PlatformOpenSea,
	_PlatformLowerName[113:120]: PlatformOpenSea,
	_PlatformName[120:128]:      PlatformOptimism,
	_PlatformLowerName[120:128]: PlatformOptimism,
	_PlatformName[128:137]:      PlatformParagraph,
	_PlatformLowerName[128:137]: PlatformParagraph,
	_PlatformName[137:141]:      PlatformRSS3,
	_PlatformLowerName[137:141]: PlatformRSS3,
	_PlatformName[141:145]:      PlatformSAVM,
	_PlatformLowerName[141:145]: PlatformSAVM,
	_PlatformName[145:153]:      PlatformStargate,
	_PlatformLowerName[145:153]: PlatformStargate,
	_PlatformName[153:160]:      PlatformUniswap,
	_PlatformLowerName[153:160]: PlatformUniswap,
	_PlatformName[160:163]:      PlatformVSL,
	_PlatformLowerName[160:163]: PlatformVSL,
}

var _PlatformNames = []string{
	_PlatformName[0:7],
	_PlatformName[7:12],
	_PlatformName[12:16],
	_PlatformName[16:26],
	_PlatformName[26:33],
	_PlatformName[33:42],
	_PlatformName[42:47],
	_PlatformName[47:50],
	_PlatformName[50:59],
	_PlatformName[59:68],
	_PlatformName[68:74],
	_PlatformName[74:83],
	_PlatformName[83:87],
	_PlatformName[87:91],
	_PlatformName[91:100],
	_PlatformName[100:107],
	_PlatformName[107:113],
	_PlatformName[113:120],
	_PlatformName[120:128],
	_PlatformName[128:137],
	_PlatformName[137:141],
	_PlatformName[141:145],
	_PlatformName[145:153],
	_PlatformName[153:160],
	_PlatformName[160:163],
}

// PlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlatformString(s string) (Platform, error) {
	if val, ok := _PlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Platform values", s)
}

// PlatformValues returns all values of the enum
func PlatformValues() []Platform {
	return _PlatformValues
}

// PlatformStrings returns a slice of all String values of the enum
func PlatformStrings() []string {
	strs := make([]string, len(_PlatformNames))
	copy(strs, _PlatformNames)
	return strs
}

// IsAPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Platform) IsAPlatform() bool {
	for _, v := range _PlatformValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Platform
func (i Platform) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Platform
func (i *Platform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Platform should be a string, got %s", data)
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Platform
func (i Platform) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Platform
func (i *Platform) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

func (i Platform) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Platform) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Platform: %[1]T(%[1]v)", value)
	}

	val, err := PlatformString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
