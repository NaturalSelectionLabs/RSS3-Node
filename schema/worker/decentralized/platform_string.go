// Code generated by "enumer --values --type=Platform --linecomment --output platform_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PlatformName = "Unknown1inchAAVEAavegotchiCowBendDAOCrossbellCurveENSFarcasterHighlightIQWikiKiwiStandLensLidoLooksRareMattersMirrorOpenSeaOptimismParagraphRSS3SAVMStargateUniswapVSL"

var _PlatformIndex = [...]uint8{0, 7, 12, 16, 26, 29, 36, 45, 50, 53, 62, 71, 77, 86, 90, 94, 103, 110, 116, 123, 131, 140, 144, 148, 156, 163, 166}

const _PlatformLowerName = "unknown1inchaaveaavegotchicowbenddaocrossbellcurveensfarcasterhighlightiqwikikiwistandlenslidolooksraremattersmirroropenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Platform) String() string {
	if i >= Platform(len(_PlatformIndex)-1) {
		return fmt.Sprintf("Platform(%d)", i)
	}
	return _PlatformName[_PlatformIndex[i]:_PlatformIndex[i+1]]
}

func (Platform) Values() []string {
	return PlatformStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlatformNoOp() {
	var x [1]struct{}
	_ = x[PlatformUnknown-(0)]
	_ = x[Platform1Inch-(1)]
	_ = x[PlatformAAVE-(2)]
	_ = x[PlatformAavegotchi-(3)]
	_ = x[PlatformCow-(4)]
	_ = x[PlatformBendDAO-(5)]
	_ = x[PlatformCrossbell-(6)]
	_ = x[PlatformCurve-(7)]
	_ = x[PlatformENS-(8)]
	_ = x[PlatformFarcaster-(9)]
	_ = x[PlatformHighlight-(10)]
	_ = x[PlatformIQWiki-(11)]
	_ = x[PlatformKiwiStand-(12)]
	_ = x[PlatformLens-(13)]
	_ = x[PlatformLido-(14)]
	_ = x[PlatformLooksRare-(15)]
	_ = x[PlatformMatters-(16)]
	_ = x[PlatformMirror-(17)]
	_ = x[PlatformOpenSea-(18)]
	_ = x[PlatformOptimism-(19)]
	_ = x[PlatformParagraph-(20)]
	_ = x[PlatformRSS3-(21)]
	_ = x[PlatformSAVM-(22)]
	_ = x[PlatformStargate-(23)]
	_ = x[PlatformUniswap-(24)]
	_ = x[PlatformVSL-(25)]
}

var _PlatformValues = []Platform{PlatformUnknown, Platform1Inch, PlatformAAVE, PlatformAavegotchi, PlatformCow, PlatformBendDAO, PlatformCrossbell, PlatformCurve, PlatformENS, PlatformFarcaster, PlatformHighlight, PlatformIQWiki, PlatformKiwiStand, PlatformLens, PlatformLido, PlatformLooksRare, PlatformMatters, PlatformMirror, PlatformOpenSea, PlatformOptimism, PlatformParagraph, PlatformRSS3, PlatformSAVM, PlatformStargate, PlatformUniswap, PlatformVSL}

var _PlatformNameToValueMap = map[string]Platform{
	_PlatformName[0:7]:          PlatformUnknown,
	_PlatformLowerName[0:7]:     PlatformUnknown,
	_PlatformName[7:12]:         Platform1Inch,
	_PlatformLowerName[7:12]:    Platform1Inch,
	_PlatformName[12:16]:        PlatformAAVE,
	_PlatformLowerName[12:16]:   PlatformAAVE,
	_PlatformName[16:26]:        PlatformAavegotchi,
	_PlatformLowerName[16:26]:   PlatformAavegotchi,
	_PlatformName[26:29]:        PlatformCow,
	_PlatformLowerName[26:29]:   PlatformCow,
	_PlatformName[29:36]:        PlatformBendDAO,
	_PlatformLowerName[29:36]:   PlatformBendDAO,
	_PlatformName[36:45]:        PlatformCrossbell,
	_PlatformLowerName[36:45]:   PlatformCrossbell,
	_PlatformName[45:50]:        PlatformCurve,
	_PlatformLowerName[45:50]:   PlatformCurve,
	_PlatformName[50:53]:        PlatformENS,
	_PlatformLowerName[50:53]:   PlatformENS,
	_PlatformName[53:62]:        PlatformFarcaster,
	_PlatformLowerName[53:62]:   PlatformFarcaster,
	_PlatformName[62:71]:        PlatformHighlight,
	_PlatformLowerName[62:71]:   PlatformHighlight,
	_PlatformName[71:77]:        PlatformIQWiki,
	_PlatformLowerName[71:77]:   PlatformIQWiki,
	_PlatformName[77:86]:        PlatformKiwiStand,
	_PlatformLowerName[77:86]:   PlatformKiwiStand,
	_PlatformName[86:90]:        PlatformLens,
	_PlatformLowerName[86:90]:   PlatformLens,
	_PlatformName[90:94]:        PlatformLido,
	_PlatformLowerName[90:94]:   PlatformLido,
	_PlatformName[94:103]:       PlatformLooksRare,
	_PlatformLowerName[94:103]:  PlatformLooksRare,
	_PlatformName[103:110]:      PlatformMatters,
	_PlatformLowerName[103:110]: PlatformMatters,
	_PlatformName[110:116]:      PlatformMirror,
	_PlatformLowerName[110:116]: PlatformMirror,
	_PlatformName[116:123]:      PlatformOpenSea,
	_PlatformLowerName[116:123]: PlatformOpenSea,
	_PlatformName[123:131]:      PlatformOptimism,
	_PlatformLowerName[123:131]: PlatformOptimism,
	_PlatformName[131:140]:      PlatformParagraph,
	_PlatformLowerName[131:140]: PlatformParagraph,
	_PlatformName[140:144]:      PlatformRSS3,
	_PlatformLowerName[140:144]: PlatformRSS3,
	_PlatformName[144:148]:      PlatformSAVM,
	_PlatformLowerName[144:148]: PlatformSAVM,
	_PlatformName[148:156]:      PlatformStargate,
	_PlatformLowerName[148:156]: PlatformStargate,
	_PlatformName[156:163]:      PlatformUniswap,
	_PlatformLowerName[156:163]: PlatformUniswap,
	_PlatformName[163:166]:      PlatformVSL,
	_PlatformLowerName[163:166]: PlatformVSL,
}

var _PlatformNames = []string{
	_PlatformName[0:7],
	_PlatformName[7:12],
	_PlatformName[12:16],
	_PlatformName[16:26],
	_PlatformName[26:29],
	_PlatformName[29:36],
	_PlatformName[36:45],
	_PlatformName[45:50],
	_PlatformName[50:53],
	_PlatformName[53:62],
	_PlatformName[62:71],
	_PlatformName[71:77],
	_PlatformName[77:86],
	_PlatformName[86:90],
	_PlatformName[90:94],
	_PlatformName[94:103],
	_PlatformName[103:110],
	_PlatformName[110:116],
	_PlatformName[116:123],
	_PlatformName[123:131],
	_PlatformName[131:140],
	_PlatformName[140:144],
	_PlatformName[144:148],
	_PlatformName[148:156],
	_PlatformName[156:163],
	_PlatformName[163:166],
}

// PlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlatformString(s string) (Platform, error) {
	if val, ok := _PlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Platform values", s)
}

// PlatformValues returns all values of the enum
func PlatformValues() []Platform {
	return _PlatformValues
}

// PlatformStrings returns a slice of all String values of the enum
func PlatformStrings() []string {
	strs := make([]string, len(_PlatformNames))
	copy(strs, _PlatformNames)
	return strs
}

// IsAPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Platform) IsAPlatform() bool {
	for _, v := range _PlatformValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Platform
func (i Platform) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Platform
func (i *Platform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Platform should be a string, got %s", data)
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Platform
func (i Platform) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Platform
func (i *Platform) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

func (i Platform) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Platform) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Platform: %[1]T(%[1]v)", value)
	}

	val, err := PlatformString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
