// Code generated by "enumer --values --type=Platform --linecomment --output platform_string.go --json --yaml --sql"; DO NOT EDIT.

package decentralized

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _PlatformName = "Unknown1inchAAVEAavegotchiArbitrumBendDAOCrossbellCurveENSFarcasterHighlightIQWikiKiwiStandLensLidoLooksRareMattersMirrorOpenSeaOptimismParagraphRSS3SAVMStargateUniswapVSL"

var _PlatformIndex = [...]uint8{0, 7, 12, 16, 26, 34, 41, 50, 55, 58, 67, 76, 82, 91, 95, 99, 108, 115, 121, 128, 136, 145, 149, 153, 161, 168, 171}

const _PlatformLowerName = "unknown1inchaaveaavegotchiarbitrumbenddaocrossbellcurveensfarcasterhighlightiqwikikiwistandlenslidolooksraremattersmirroropenseaoptimismparagraphrss3savmstargateuniswapvsl"

func (i Platform) String() string {
	if i >= Platform(len(_PlatformIndex)-1) {
		return fmt.Sprintf("Platform(%d)", i)
	}
	return _PlatformName[_PlatformIndex[i]:_PlatformIndex[i+1]]
}

func (Platform) Values() []string {
	return PlatformStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PlatformNoOp() {
	var x [1]struct{}
	_ = x[PlatformUnknown-(0)]
	_ = x[Platform1Inch-(1)]
	_ = x[PlatformAAVE-(2)]
	_ = x[PlatformAavegotchi-(3)]
	_ = x[PlatformArbitrum-(4)]
	_ = x[PlatformBendDAO-(5)]
	_ = x[PlatformCrossbell-(6)]
	_ = x[PlatformCurve-(7)]
	_ = x[PlatformENS-(8)]
	_ = x[PlatformFarcaster-(9)]
	_ = x[PlatformHighlight-(10)]
	_ = x[PlatformIQWiki-(11)]
	_ = x[PlatformKiwiStand-(12)]
	_ = x[PlatformLens-(13)]
	_ = x[PlatformLido-(14)]
	_ = x[PlatformLooksRare-(15)]
	_ = x[PlatformMatters-(16)]
	_ = x[PlatformMirror-(17)]
	_ = x[PlatformOpenSea-(18)]
	_ = x[PlatformOptimism-(19)]
	_ = x[PlatformParagraph-(20)]
	_ = x[PlatformRSS3-(21)]
	_ = x[PlatformSAVM-(22)]
	_ = x[PlatformStargate-(23)]
	_ = x[PlatformUniswap-(24)]
	_ = x[PlatformVSL-(25)]
}

var _PlatformValues = []Platform{PlatformUnknown, Platform1Inch, PlatformAAVE, PlatformAavegotchi, PlatformArbitrum, PlatformBendDAO, PlatformCrossbell, PlatformCurve, PlatformENS, PlatformFarcaster, PlatformHighlight, PlatformIQWiki, PlatformKiwiStand, PlatformLens, PlatformLido, PlatformLooksRare, PlatformMatters, PlatformMirror, PlatformOpenSea, PlatformOptimism, PlatformParagraph, PlatformRSS3, PlatformSAVM, PlatformStargate, PlatformUniswap, PlatformVSL}

var _PlatformNameToValueMap = map[string]Platform{
	_PlatformName[0:7]:          PlatformUnknown,
	_PlatformLowerName[0:7]:     PlatformUnknown,
	_PlatformName[7:12]:         Platform1Inch,
	_PlatformLowerName[7:12]:    Platform1Inch,
	_PlatformName[12:16]:        PlatformAAVE,
	_PlatformLowerName[12:16]:   PlatformAAVE,
	_PlatformName[16:26]:        PlatformAavegotchi,
	_PlatformLowerName[16:26]:   PlatformAavegotchi,
	_PlatformName[26:34]:        PlatformArbitrum,
	_PlatformLowerName[26:34]:   PlatformArbitrum,
	_PlatformName[34:41]:        PlatformBendDAO,
	_PlatformLowerName[34:41]:   PlatformBendDAO,
	_PlatformName[41:50]:        PlatformCrossbell,
	_PlatformLowerName[41:50]:   PlatformCrossbell,
	_PlatformName[50:55]:        PlatformCurve,
	_PlatformLowerName[50:55]:   PlatformCurve,
	_PlatformName[55:58]:        PlatformENS,
	_PlatformLowerName[55:58]:   PlatformENS,
	_PlatformName[58:67]:        PlatformFarcaster,
	_PlatformLowerName[58:67]:   PlatformFarcaster,
	_PlatformName[67:76]:        PlatformHighlight,
	_PlatformLowerName[67:76]:   PlatformHighlight,
	_PlatformName[76:82]:        PlatformIQWiki,
	_PlatformLowerName[76:82]:   PlatformIQWiki,
	_PlatformName[82:91]:        PlatformKiwiStand,
	_PlatformLowerName[82:91]:   PlatformKiwiStand,
	_PlatformName[91:95]:        PlatformLens,
	_PlatformLowerName[91:95]:   PlatformLens,
	_PlatformName[95:99]:        PlatformLido,
	_PlatformLowerName[95:99]:   PlatformLido,
	_PlatformName[99:108]:       PlatformLooksRare,
	_PlatformLowerName[99:108]:  PlatformLooksRare,
	_PlatformName[108:115]:      PlatformMatters,
	_PlatformLowerName[108:115]: PlatformMatters,
	_PlatformName[115:121]:      PlatformMirror,
	_PlatformLowerName[115:121]: PlatformMirror,
	_PlatformName[121:128]:      PlatformOpenSea,
	_PlatformLowerName[121:128]: PlatformOpenSea,
	_PlatformName[128:136]:      PlatformOptimism,
	_PlatformLowerName[128:136]: PlatformOptimism,
	_PlatformName[136:145]:      PlatformParagraph,
	_PlatformLowerName[136:145]: PlatformParagraph,
	_PlatformName[145:149]:      PlatformRSS3,
	_PlatformLowerName[145:149]: PlatformRSS3,
	_PlatformName[149:153]:      PlatformSAVM,
	_PlatformLowerName[149:153]: PlatformSAVM,
	_PlatformName[153:161]:      PlatformStargate,
	_PlatformLowerName[153:161]: PlatformStargate,
	_PlatformName[161:168]:      PlatformUniswap,
	_PlatformLowerName[161:168]: PlatformUniswap,
	_PlatformName[168:171]:      PlatformVSL,
	_PlatformLowerName[168:171]: PlatformVSL,
}

var _PlatformNames = []string{
	_PlatformName[0:7],
	_PlatformName[7:12],
	_PlatformName[12:16],
	_PlatformName[16:26],
	_PlatformName[26:34],
	_PlatformName[34:41],
	_PlatformName[41:50],
	_PlatformName[50:55],
	_PlatformName[55:58],
	_PlatformName[58:67],
	_PlatformName[67:76],
	_PlatformName[76:82],
	_PlatformName[82:91],
	_PlatformName[91:95],
	_PlatformName[95:99],
	_PlatformName[99:108],
	_PlatformName[108:115],
	_PlatformName[115:121],
	_PlatformName[121:128],
	_PlatformName[128:136],
	_PlatformName[136:145],
	_PlatformName[145:149],
	_PlatformName[149:153],
	_PlatformName[153:161],
	_PlatformName[161:168],
	_PlatformName[168:171],
}

// PlatformString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PlatformString(s string) (Platform, error) {
	if val, ok := _PlatformNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PlatformNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Platform values", s)
}

// PlatformValues returns all values of the enum
func PlatformValues() []Platform {
	return _PlatformValues
}

// PlatformStrings returns a slice of all String values of the enum
func PlatformStrings() []string {
	strs := make([]string, len(_PlatformNames))
	copy(strs, _PlatformNames)
	return strs
}

// IsAPlatform returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Platform) IsAPlatform() bool {
	for _, v := range _PlatformValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Platform
func (i Platform) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Platform
func (i *Platform) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Platform should be a string, got %s", data)
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Platform
func (i Platform) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Platform
func (i *Platform) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = PlatformString(s)
	return err
}

func (i Platform) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Platform) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Platform: %[1]T(%[1]v)", value)
	}

	val, err := PlatformString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
