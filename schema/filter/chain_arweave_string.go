// Code generated by "enumer --values --type=ChainArweave --linecomment --output chain_arweave_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ChainArweaveName = "mainnet"

var _ChainArweaveIndex = [...]uint8{0, 7}

const _ChainArweaveLowerName = "mainnet"

func (i ChainArweave) String() string {
	i -= 1
	if i >= ChainArweave(len(_ChainArweaveIndex)-1) {
		return fmt.Sprintf("ChainArweave(%d)", i+1)
	}
	return _ChainArweaveName[_ChainArweaveIndex[i]:_ChainArweaveIndex[i+1]]
}

func (ChainArweave) Values() []string {
	return ChainArweaveStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChainArweaveNoOp() {
	var x [1]struct{}
	_ = x[ChainArweaveMainnet-(1)]
}

var _ChainArweaveValues = []ChainArweave{ChainArweaveMainnet}

var _ChainArweaveNameToValueMap = map[string]ChainArweave{
	_ChainArweaveName[0:7]:      ChainArweaveMainnet,
	_ChainArweaveLowerName[0:7]: ChainArweaveMainnet,
}

var _ChainArweaveNames = []string{
	_ChainArweaveName[0:7],
}

// ChainArweaveString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChainArweaveString(s string) (ChainArweave, error) {
	if val, ok := _ChainArweaveNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChainArweaveNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChainArweave values", s)
}

// ChainArweaveValues returns all values of the enum
func ChainArweaveValues() []ChainArweave {
	return _ChainArweaveValues
}

// ChainArweaveStrings returns a slice of all String values of the enum
func ChainArweaveStrings() []string {
	strs := make([]string, len(_ChainArweaveNames))
	copy(strs, _ChainArweaveNames)
	return strs
}

// IsAChainArweave returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChainArweave) IsAChainArweave() bool {
	for _, v := range _ChainArweaveValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChainArweave
func (i ChainArweave) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChainArweave
func (i *ChainArweave) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChainArweave should be a string, got %s", data)
	}

	var err error
	*i, err = ChainArweaveString(s)
	return err
}

func (i ChainArweave) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ChainArweave) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ChainArweave: %[1]T(%[1]v)", value)
	}

	val, err := ChainArweaveString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
