// Code generated by "enumer --values --type=ChainRSS --linecomment --output chain_rss_string.go --json --sql"; DO NOT EDIT.

package filter

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ChainRSSName = "rsshub"

var _ChainRSSIndex = [...]uint8{0, 6}

const _ChainRSSLowerName = "rsshub"

func (i ChainRSS) String() string {
	i -= 1
	if i >= ChainRSS(len(_ChainRSSIndex)-1) {
		return fmt.Sprintf("ChainRSS(%d)", i+1)
	}
	return _ChainRSSName[_ChainRSSIndex[i]:_ChainRSSIndex[i+1]]
}

func (ChainRSS) Values() []string {
	return ChainRSSStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChainRSSNoOp() {
	var x [1]struct{}
	_ = x[ChainRSSRSSHub-(1)]
}

var _ChainRSSValues = []ChainRSS{ChainRSSRSSHub}

var _ChainRSSNameToValueMap = map[string]ChainRSS{
	_ChainRSSName[0:6]:      ChainRSSRSSHub,
	_ChainRSSLowerName[0:6]: ChainRSSRSSHub,
}

var _ChainRSSNames = []string{
	_ChainRSSName[0:6],
}

// ChainRSSString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChainRSSString(s string) (ChainRSS, error) {
	if val, ok := _ChainRSSNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChainRSSNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChainRSS values", s)
}

// ChainRSSValues returns all values of the enum
func ChainRSSValues() []ChainRSS {
	return _ChainRSSValues
}

// ChainRSSStrings returns a slice of all String values of the enum
func ChainRSSStrings() []string {
	strs := make([]string, len(_ChainRSSNames))
	copy(strs, _ChainRSSNames)
	return strs
}

// IsAChainRSS returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChainRSS) IsAChainRSS() bool {
	for _, v := range _ChainRSSValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChainRSS
func (i ChainRSS) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChainRSS
func (i *ChainRSS) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChainRSS should be a string, got %s", data)
	}

	var err error
	*i, err = ChainRSSString(s)
	return err
}

func (i ChainRSS) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ChainRSS) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ChainRSS: %[1]T(%[1]v)", value)
	}

	val, err := ChainRSSString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
