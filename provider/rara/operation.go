// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package rara

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetIpfsResponse is returned by GetIpfs on success.
type GetIpfsResponse struct {
	UserSpends []GetIpfsUserSpendsUserSpend `json:"userSpends"`
}

// GetUserSpends returns GetIpfsResponse.UserSpends, and is useful for accessing the field via an interface.
func (v *GetIpfsResponse) GetUserSpends() []GetIpfsUserSpendsUserSpend { return v.UserSpends }

// GetIpfsUserSpendsUserSpend includes the requested fields of the GraphQL type UserSpend.
type GetIpfsUserSpendsUserSpend struct {
	User     string   `json:"user"`
	Comment  string   `json:"comment"`
	Tags     []string `json:"tags"`
	IpfsHash string   `json:"ipfsHash"`
}

// GetUser returns GetIpfsUserSpendsUserSpend.User, and is useful for accessing the field via an interface.
func (v *GetIpfsUserSpendsUserSpend) GetUser() string { return v.User }

// GetComment returns GetIpfsUserSpendsUserSpend.Comment, and is useful for accessing the field via an interface.
func (v *GetIpfsUserSpendsUserSpend) GetComment() string { return v.Comment }

// GetTags returns GetIpfsUserSpendsUserSpend.Tags, and is useful for accessing the field via an interface.
func (v *GetIpfsUserSpendsUserSpend) GetTags() []string { return v.Tags }

// GetIpfsHash returns GetIpfsUserSpendsUserSpend.IpfsHash, and is useful for accessing the field via an interface.
func (v *GetIpfsUserSpendsUserSpend) GetIpfsHash() string { return v.IpfsHash }

// __GetIpfsInput is used internally by genqlient
type __GetIpfsInput struct {
	IpfsHash string `json:"ipfsHash"`
}

// GetIpfsHash returns __GetIpfsInput.IpfsHash, and is useful for accessing the field via an interface.
func (v *__GetIpfsInput) GetIpfsHash() string { return v.IpfsHash }

// The query or mutation executed by GetIpfs.
const GetIpfs_Operation = `
query GetIpfs ($ipfsHash: String!) {
	userSpends(where: {ipfsHash:$ipfsHash}) {
		user
		comment
		tags
		ipfsHash
	}
}
`

func GetIpfs(
	ctx context.Context,
	client graphql.Client,
	ipfsHash string,
) (*GetIpfsResponse, error) {
	req := &graphql.Request{
		OpName: "GetIpfs",
		Query:  GetIpfs_Operation,
		Variables: &__GetIpfsInput{
			IpfsHash: ipfsHash,
		},
	}
	var err error

	var data GetIpfsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
