# This file was generated. Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type Alias {
    address: String!
    alias: String!
    created: Int!
    id: String!
    ipfs: String
}

type DelegationPortal {
    delegationApi: String!
    delegationContract: String!
    delegationType: String!
}

type Follow {
    created: Int!
    follower: String!
    id: String!
    ipfs: String
    space: Space!
}

type Item {
    id: String!
    spacesCount: Int
}

type Message {
    address: String
    id: String
    ipfs: String
    mci: Int
    receipt: String
    sig: String
    space: String
    timestamp: Int
    type: String
    version: String
}

type Metrics {
    categories: Any
    total: Int
}

type Proposal {
    app: String
    author: String!
    body: String
    choices: [String]!
    created: Int!
    discussion: String!
    end: Int!
    flagged: Boolean
    id: String!
    ipfs: String
    link: String
    network: String!
    plugins: Any!
    privacy: String
    quorum: Float!
    scores: [Float]
    scores_by_strategy: Any
    scores_state: String
    scores_total: Float
    scores_updated: Int
    snapshot: String
    space: Space
    start: Int!
    state: String
    strategies: [Strategy]!
    symbol: String!
    title: String!
    type: String
    validation: Validation
    votes: Int
}

type Query {
    aliases(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: AliasWhere): [Alias]
    follows(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: FollowWhere): [Follow]
    messages(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: MessageWhere): [Message]
    networks: [Item]
    plugins: [Item]
    proposal(id: String): Proposal
    proposals(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: ProposalWhere): [Proposal]
    ranking(first: Int, skip: Int, where: RankingWhere): RankingObject
    skins: [Item]
    space(id: String): Space
    spaces(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: SpaceWhere): [Space]
    statement(id: String): Statement
    statements(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: StatementsWhere): [Statement]
    strategies: [StrategyItem]
    strategy(id: String): StrategyItem
    subscriptions(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: SubscriptionWhere): [Subscription]
    user(id: String): User
    users(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: UsersWhere): [User]
    validations: [Item]
    vote(id: String): Vote
    votes(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: VoteWhere): [Vote]
    vp(proposal: String, space: String!, voter: String!): Vp
}

type RankingObject {
    items: [Space]
    metrics: Metrics
}

type Space {
    about: String
    activeProposals: Int
    admins: [String]
    avatar: String
    categories: [String]
    children: [Space]
    coingecko: String
    delegationPortal: DelegationPortal
    domain: String
    email: String
    filters: SpaceFilters
    flagged: Boolean
    followersCount: Int
    followersCount7d: Int
    github: String
    guidelines: String
    id: String!
    location: String
    members: [String]
    moderators: [String]
    name: String
    network: String
    parent: Space
    plugins: Any
    private: Boolean
    proposalsCount: Int
    proposalsCount7d: Int
    rank: Float
    skin: String
    strategies: [Strategy]
    symbol: String
    template: String
    terms: String
    treasuries: [Treasury]
    twitter: String
    validation: Validation
    verified: Boolean
    voteValidation: Validation
    votesCount: Int
    votesCount7d: Int
    voting: SpaceVoting
    website: String
}

type SpaceFilters {
    minScore: Float
    onlyMembers: Boolean
}

type SpaceVoting {
    aliased: Boolean
    blind: Boolean
    delay: Int
    hideAbstain: Boolean
    period: Int
    privacy: String
    quorum: Float
    type: String
}

type Statement {
    about: String
    created: Int!
    delegate: String
    id: String!
    ipfs: String!
    space: String!
    statement: String
    updated: Int!
}

type Strategy {
    name: String!
    network: String
    params: Any
}

type StrategyItem {
    about: String
    author: String
    examples: [Any]
    id: String!
    schema: Any
    spacesCount: Int
    version: String
}

type Subscription {
    address: String!
    created: Int!
    id: String!
    ipfs: String
    space: Space!
}

type Treasury {
    address: String
    name: String
    network: String
}

type User {
    about: String
    avatar: String
    created: Int!
    id: String!
    ipfs: String
    name: String
}

type Validation {
    name: String!
    params: Any
}

type Vote {
    app: String
    choice: Any!
    created: Int!
    id: String!
    ipfs: String
    metadata: Any
    proposal: Proposal
    reason: String
    space: Space!
    voter: String!
    vp: Float
    vp_by_strategy: [Float]
    vp_state: String
}

type Vp {
    vp: Float
    vp_by_strategy: [Float]
    vp_state: String
}

enum OrderDirection {
    asc
    desc
}

scalar Any

input AliasWhere {
    address: String
    address_in: [String]
    alias: String
    alias_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
}

input FollowWhere {
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    follower: String
    follower_in: [String]
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    space: String
    space_in: [String]
}

input MessageWhere {
    id: String
    id_in: [String]
    mci: Int
    mci_gt: Int
    mci_gte: Int
    mci_in: [Int]
    mci_lt: Int
    mci_lte: Int
    space: String
    space_in: [String]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int]
    timestamp_lt: Int
    timestamp_lte: Int
    type: String
    type_in: [String]
}

input ProposalWhere {
    app: String
    app_in: [String]
    app_not: String
    app_not_in: [String]
    author: String
    author_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    end: Int
    end_gt: Int
    end_gte: Int
    end_in: [Int]
    end_lt: Int
    end_lte: Int
    flagged: Boolean
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    network: String
    network_in: [String]
    plugins_contains: String
    scores_state: String
    scores_state_in: [String]
    space: String
    space_in: [String]
    space_verified: Boolean
    start: Int
    start_gt: Int
    start_gte: Int
    start_in: [Int]
    start_lt: Int
    start_lte: Int
    state: String
    strategies_contains: String
    title_contains: String
    type: String
    type_in: [String]
    validation: String
}

input RankingWhere {
    category: String
    id: String
    id_in: [String]
    network: String
    search: String
}

input SpaceWhere {
    id: String
    id_in: [String]
}

input StatementsWhere {
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    delegate: String
    delegate_in: [String]
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    space: String
    space_in: [String]
}

input SubscriptionWhere {
    address: String
    address_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    space: String
    space_in: [String]
}

input UsersWhere {
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
}

input VoteWhere {
    app: String
    app_in: [String]
    app_not: String
    app_not_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    proposal: String
    proposal_in: [String]
    reason: String
    reason_in: [String]
    reason_not: String
    reason_not_in: [String]
    space: String
    space_in: [String]
    voter: String
    voter_in: [String]
    vp: Float
    vp_gt: Float
    vp_gte: Float
    vp_in: [Float]
    vp_lt: Float
    vp_lte: Float
    vp_state: String
    vp_state_in: [String]
}
