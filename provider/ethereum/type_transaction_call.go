// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ethereum

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*transactionCallMarshal)(nil)

// MarshalJSON marshals as JSON.
func (t TransactionCall) MarshalJSON() ([]byte, error) {
	type TransactionCall struct {
		From     common.Address  `json:"from"`
		To       *common.Address `json:"to,omitempty"`
		Gas      hexutil.Uint64  `json:"gas,omitempty"`
		GasPrice *hexutil.Big    `json:"gasPrice,omitempty"`
		Value    *hexutil.Big    `json:"value,omitempty"`
		Data     hexutil.Bytes   `json:"data,omitempty"`
	}
	var enc TransactionCall
	enc.From = t.From
	enc.To = t.To
	enc.Gas = hexutil.Uint64(t.Gas)
	enc.GasPrice = (*hexutil.Big)(t.GasPrice)
	enc.Value = (*hexutil.Big)(t.Value)
	enc.Data = t.Data
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TransactionCall) UnmarshalJSON(input []byte) error {
	type TransactionCall struct {
		From     *common.Address `json:"from"`
		To       *common.Address `json:"to,omitempty"`
		Gas      *hexutil.Uint64 `json:"gas,omitempty"`
		GasPrice *hexutil.Big    `json:"gasPrice,omitempty"`
		Value    *hexutil.Big    `json:"value,omitempty"`
		Data     *hexutil.Bytes  `json:"data,omitempty"`
	}
	var dec TransactionCall
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.From != nil {
		t.From = *dec.From
	}
	if dec.To != nil {
		t.To = dec.To
	}
	if dec.Gas != nil {
		t.Gas = uint64(*dec.Gas)
	}
	if dec.GasPrice != nil {
		t.GasPrice = (*big.Int)(dec.GasPrice)
	}
	if dec.Value != nil {
		t.Value = (*big.Int)(dec.Value)
	}
	if dec.Data != nil {
		t.Data = *dec.Data
	}
	return nil
}
