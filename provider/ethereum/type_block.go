// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ethereum

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*blockMarshal)(nil)

// MarshalJSON marshals as JSON.
func (b Block) MarshalJSON() ([]byte, error) {
	type Block struct {
		Hash         common.Hash    `json:"hash"`
		ParentHash   common.Hash    `json:"parentHash"`
		UncleHash    common.Hash    `json:"sha3Uncles"`
		Coinbase     common.Address `json:"miner"`
		Number       *hexutil.Big   `json:"number"`
		GasLimit     hexutil.Uint64 `json:"gasLimit"`
		GasUsed      hexutil.Uint64 `json:"gasUsed"`
		Timestamp    hexutil.Uint64 `json:"timestamp"`
		BaseFee      *hexutil.Big   `json:"baseFeePerGas"`
		Transactions []*Transaction `json:"transactions"`
	}
	var enc Block
	enc.Hash = b.Hash
	enc.ParentHash = b.ParentHash
	enc.UncleHash = b.UncleHash
	enc.Coinbase = b.Coinbase
	enc.Number = (*hexutil.Big)(b.Number)
	enc.GasLimit = hexutil.Uint64(b.GasLimit)
	enc.GasUsed = hexutil.Uint64(b.GasUsed)
	enc.Timestamp = hexutil.Uint64(b.Timestamp)
	enc.BaseFee = (*hexutil.Big)(b.BaseFee)
	enc.Transactions = b.Transactions
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *Block) UnmarshalJSON(input []byte) error {
	type Block struct {
		Hash         *common.Hash    `json:"hash"`
		ParentHash   *common.Hash    `json:"parentHash"`
		UncleHash    *common.Hash    `json:"sha3Uncles"`
		Coinbase     *common.Address `json:"miner"`
		Number       *hexutil.Big    `json:"number"`
		GasLimit     *hexutil.Uint64 `json:"gasLimit"`
		GasUsed      *hexutil.Uint64 `json:"gasUsed"`
		Timestamp    *hexutil.Uint64 `json:"timestamp"`
		BaseFee      *hexutil.Big    `json:"baseFeePerGas"`
		Transactions []*Transaction  `json:"transactions"`
	}
	var dec Block
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.UncleHash != nil {
		b.UncleHash = *dec.UncleHash
	}
	if dec.Coinbase != nil {
		b.Coinbase = *dec.Coinbase
	}
	if dec.Number != nil {
		b.Number = (*big.Int)(dec.Number)
	}
	if dec.GasLimit != nil {
		b.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasUsed != nil {
		b.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Timestamp != nil {
		b.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.BaseFee != nil {
		b.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.Transactions != nil {
		b.Transactions = dec.Transactions
	}
	return nil
}
