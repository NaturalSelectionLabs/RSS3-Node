// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ethereum

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*receiptMarshal)(nil)

// MarshalJSON marshals as JSON.
func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		BlockHash         common.Hash     `json:"blockHash"`
		BlockNumber       *hexutil.Big    `json:"blockNumber"`
		ContractAddress   *common.Address `json:"contractAddress"`
		CumulativeGasUsed hexutil.Uint64  `json:"cumulativeGasUsed"`
		EffectiveGasPrice *hexutil.Big    `json:"effectiveGasPrice"`
		GasUsed           hexutil.Uint64  `json:"gasUsed"`
		Logs              []*Log          `json:"logs"`
		Status            hexutil.Uint64  `json:"status"`
		TransactionHash   common.Hash     `json:"transactionHash"`
		TransactionIndex  hexutil.Uint    `json:"transactionIndex"`
	}
	var enc Receipt
	enc.BlockHash = r.BlockHash
	enc.BlockNumber = (*hexutil.Big)(r.BlockNumber)
	enc.ContractAddress = r.ContractAddress
	enc.CumulativeGasUsed = hexutil.Uint64(r.CumulativeGasUsed)
	enc.EffectiveGasPrice = (*hexutil.Big)(r.EffectiveGasPrice)
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	enc.Logs = r.Logs
	enc.Status = hexutil.Uint64(r.Status)
	enc.TransactionHash = r.TransactionHash
	enc.TransactionIndex = hexutil.Uint(r.TransactionIndex)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		BlockHash         *common.Hash    `json:"blockHash"`
		BlockNumber       *hexutil.Big    `json:"blockNumber"`
		ContractAddress   *common.Address `json:"contractAddress"`
		CumulativeGasUsed *hexutil.Uint64 `json:"cumulativeGasUsed"`
		EffectiveGasPrice *hexutil.Big    `json:"effectiveGasPrice"`
		GasUsed           *hexutil.Uint64 `json:"gasUsed"`
		Logs              []*Log          `json:"logs"`
		Status            *hexutil.Uint64 `json:"status"`
		TransactionHash   *common.Hash    `json:"transactionHash"`
		TransactionIndex  *hexutil.Uint   `json:"transactionIndex"`
	}
	var dec Receipt
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHash != nil {
		r.BlockHash = *dec.BlockHash
	}
	if dec.BlockNumber != nil {
		r.BlockNumber = (*big.Int)(dec.BlockNumber)
	}
	if dec.ContractAddress != nil {
		r.ContractAddress = dec.ContractAddress
	}
	if dec.CumulativeGasUsed != nil {
		r.CumulativeGasUsed = uint64(*dec.CumulativeGasUsed)
	}
	if dec.EffectiveGasPrice != nil {
		r.EffectiveGasPrice = (*big.Int)(dec.EffectiveGasPrice)
	}
	if dec.GasUsed != nil {
		r.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Logs != nil {
		r.Logs = dec.Logs
	}
	if dec.Status != nil {
		r.Status = uint64(*dec.Status)
	}
	if dec.TransactionHash != nil {
		r.TransactionHash = *dec.TransactionHash
	}
	if dec.TransactionIndex != nil {
		r.TransactionIndex = uint(*dec.TransactionIndex)
	}
	return nil
}
