// Code generated by "enumer --values --type=Endpoint --linecomment --output endpoint_string.go"; DO NOT EDIT.

package client

import (
	"fmt"
	"strings"
)

const _EndpointName = "https://arweave.net/https://arweave.fllstck.dev/https://ar-io.dev/https://permagate.io/https://love4src.com/"

var _EndpointIndex = [...]uint8{0, 20, 48, 66, 87, 108}

const _EndpointLowerName = "https://arweave.net/https://arweave.fllstck.dev/https://ar-io.dev/https://permagate.io/https://love4src.com/"

func (i Endpoint) String() string {
	i -= 1
	if i < 0 || i >= Endpoint(len(_EndpointIndex)-1) {
		return fmt.Sprintf("Endpoint(%d)", i+1)
	}
	return _EndpointName[_EndpointIndex[i]:_EndpointIndex[i+1]]
}

func (Endpoint) Values() []string {
	return EndpointStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EndpointNoOp() {
	var x [1]struct{}
	_ = x[EndpointArweave-(1)]
	_ = x[EndpointArweaveFllstck-(2)]
	_ = x[EndpointARIO-(3)]
	_ = x[EndpointPermagate-(4)]
	_ = x[EndpointLove4Src-(5)]
}

var _EndpointValues = []Endpoint{EndpointArweave, EndpointArweaveFllstck, EndpointARIO, EndpointPermagate, EndpointLove4Src}

var _EndpointNameToValueMap = map[string]Endpoint{
	_EndpointName[0:20]:        EndpointArweave,
	_EndpointLowerName[0:20]:   EndpointArweave,
	_EndpointName[20:48]:       EndpointArweaveFllstck,
	_EndpointLowerName[20:48]:  EndpointArweaveFllstck,
	_EndpointName[48:66]:       EndpointARIO,
	_EndpointLowerName[48:66]:  EndpointARIO,
	_EndpointName[66:87]:       EndpointPermagate,
	_EndpointLowerName[66:87]:  EndpointPermagate,
	_EndpointName[87:108]:      EndpointLove4Src,
	_EndpointLowerName[87:108]: EndpointLove4Src,
}

var _EndpointNames = []string{
	_EndpointName[0:20],
	_EndpointName[20:48],
	_EndpointName[48:66],
	_EndpointName[66:87],
	_EndpointName[87:108],
}

// EndpointString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EndpointString(s string) (Endpoint, error) {
	if val, ok := _EndpointNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EndpointNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Endpoint values", s)
}

// EndpointValues returns all values of the enum
func EndpointValues() []Endpoint {
	return _EndpointValues
}

// EndpointStrings returns a slice of all String values of the enum
func EndpointStrings() []string {
	strs := make([]string, len(_EndpointNames))
	copy(strs, _EndpointNames)
	return strs
}

// IsAEndpoint returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Endpoint) IsAEndpoint() bool {
	for _, v := range _EndpointValues {
		if i == v {
			return true
		}
	}
	return false
}
