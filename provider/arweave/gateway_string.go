// Code generated by "enumer --values --type=Gateway --linecomment --output gateway_string.go"; DO NOT EDIT.

package arweave

import (
	"fmt"
	"strings"
)

const _GatewayName = "https://arweave.net/https://ar-io.dev/https://permagate.io/https://love4src.com/https://arbr.pro/https://bobinstein.com/https://aleko0o.store/https://sulapan.com/https://arweave.fllstck.dev/https://bicem.xyzhttps://dilsinay.online/https://lostgame.online/https://khaldrogo.site/https://dasamuka.cloud/http://arendor.xyz/https://velaryon.xyz/"

var _GatewayIndex = [...]uint16{0, 20, 38, 59, 80, 97, 120, 142, 162, 190, 207, 231, 255, 278, 301, 320, 341}

const _GatewayLowerName = "https://arweave.net/https://ar-io.dev/https://permagate.io/https://love4src.com/https://arbr.pro/https://bobinstein.com/https://aleko0o.store/https://sulapan.com/https://arweave.fllstck.dev/https://bicem.xyzhttps://dilsinay.online/https://lostgame.online/https://khaldrogo.site/https://dasamuka.cloud/http://arendor.xyz/https://velaryon.xyz/"

func (i Gateway) String() string {
	if i >= Gateway(len(_GatewayIndex)-1) {
		return fmt.Sprintf("Gateway(%d)", i)
	}
	return _GatewayName[_GatewayIndex[i]:_GatewayIndex[i+1]]
}

func (Gateway) Values() []string {
	return GatewayStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _GatewayNoOp() {
	var x [1]struct{}
	_ = x[GatewayArweave-(0)]
	_ = x[GatewayARIO-(1)]
	_ = x[GatewayPermagate-(2)]
	_ = x[GatewayLove4Src-(3)]
	_ = x[GatewayARBR-(4)]
	_ = x[GatewayBobInstein-(5)]
	_ = x[GatewayAleko0o-(6)]
	_ = x[GatewaySulapan-(7)]
	_ = x[GatewayFllstck-(8)]
	_ = x[GatewayBicem-(9)]
	_ = x[GatewayDilsinay-(10)]
	_ = x[GatewayLostGame-(11)]
	_ = x[GatewayKhalDrogo-(12)]
	_ = x[GatewayDasamuka-(13)]
	_ = x[GatewayArendor-(14)]
	_ = x[GatewayVelaryon-(15)]
}

var _GatewayValues = []Gateway{GatewayArweave, GatewayARIO, GatewayPermagate, GatewayLove4Src, GatewayARBR, GatewayBobInstein, GatewayAleko0o, GatewaySulapan, GatewayFllstck, GatewayBicem, GatewayDilsinay, GatewayLostGame, GatewayKhalDrogo, GatewayDasamuka, GatewayArendor, GatewayVelaryon}

var _GatewayNameToValueMap = map[string]Gateway{
	_GatewayName[0:20]:         GatewayArweave,
	_GatewayLowerName[0:20]:    GatewayArweave,
	_GatewayName[20:38]:        GatewayARIO,
	_GatewayLowerName[20:38]:   GatewayARIO,
	_GatewayName[38:59]:        GatewayPermagate,
	_GatewayLowerName[38:59]:   GatewayPermagate,
	_GatewayName[59:80]:        GatewayLove4Src,
	_GatewayLowerName[59:80]:   GatewayLove4Src,
	_GatewayName[80:97]:        GatewayARBR,
	_GatewayLowerName[80:97]:   GatewayARBR,
	_GatewayName[97:120]:       GatewayBobInstein,
	_GatewayLowerName[97:120]:  GatewayBobInstein,
	_GatewayName[120:142]:      GatewayAleko0o,
	_GatewayLowerName[120:142]: GatewayAleko0o,
	_GatewayName[142:162]:      GatewaySulapan,
	_GatewayLowerName[142:162]: GatewaySulapan,
	_GatewayName[162:190]:      GatewayFllstck,
	_GatewayLowerName[162:190]: GatewayFllstck,
	_GatewayName[190:207]:      GatewayBicem,
	_GatewayLowerName[190:207]: GatewayBicem,
	_GatewayName[207:231]:      GatewayDilsinay,
	_GatewayLowerName[207:231]: GatewayDilsinay,
	_GatewayName[231:255]:      GatewayLostGame,
	_GatewayLowerName[231:255]: GatewayLostGame,
	_GatewayName[255:278]:      GatewayKhalDrogo,
	_GatewayLowerName[255:278]: GatewayKhalDrogo,
	_GatewayName[278:301]:      GatewayDasamuka,
	_GatewayLowerName[278:301]: GatewayDasamuka,
	_GatewayName[301:320]:      GatewayArendor,
	_GatewayLowerName[301:320]: GatewayArendor,
	_GatewayName[320:341]:      GatewayVelaryon,
	_GatewayLowerName[320:341]: GatewayVelaryon,
}

var _GatewayNames = []string{
	_GatewayName[0:20],
	_GatewayName[20:38],
	_GatewayName[38:59],
	_GatewayName[59:80],
	_GatewayName[80:97],
	_GatewayName[97:120],
	_GatewayName[120:142],
	_GatewayName[142:162],
	_GatewayName[162:190],
	_GatewayName[190:207],
	_GatewayName[207:231],
	_GatewayName[231:255],
	_GatewayName[255:278],
	_GatewayName[278:301],
	_GatewayName[301:320],
	_GatewayName[320:341],
}

// GatewayString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GatewayString(s string) (Gateway, error) {
	if val, ok := _GatewayNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _GatewayNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Gateway values", s)
}

// GatewayValues returns all values of the enum
func GatewayValues() []Gateway {
	return _GatewayValues
}

// GatewayStrings returns a slice of all String values of the enum
func GatewayStrings() []string {
	strs := make([]string, len(_GatewayNames))
	copy(strs, _GatewayNames)
	return strs
}

// IsAGateway returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Gateway) IsAGateway() bool {
	for _, v := range _GatewayValues {
		if i == v {
			return true
		}
	}
	return false
}
