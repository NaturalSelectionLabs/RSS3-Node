// Code generated by "enumer --values --type=HubEventType --output type_event.go --transform=snake-upper"; DO NOT EDIT.

package farcaster

import (
	"fmt"
	"strings"
)

const (
	_HubEventTypeName_0      = "HUB_EVENT_TYPE_NONEHUB_EVENT_TYPE_MERGE_MESSAGEHUB_EVENT_TYPE_PRUNE_MESSAGEHUB_EVENT_TYPE_REVOKE_MESSAGE"
	_HubEventTypeLowerName_0 = "hub_event_type_nonehub_event_type_merge_messagehub_event_type_prune_messagehub_event_type_revoke_message"
	_HubEventTypeName_1      = "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF"
	_HubEventTypeLowerName_1 = "hub_event_type_merge_username_proof"
	_HubEventTypeName_2      = "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT"
	_HubEventTypeLowerName_2 = "hub_event_type_merge_on_chain_event"
)

var (
	_HubEventTypeIndex_0 = [...]uint8{0, 19, 47, 75, 104}
	_HubEventTypeIndex_1 = [...]uint8{0, 35}
	_HubEventTypeIndex_2 = [...]uint8{0, 35}
)

func (i HubEventType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _HubEventTypeName_0[_HubEventTypeIndex_0[i]:_HubEventTypeIndex_0[i+1]]
	case i == 6:
		return _HubEventTypeName_1
	case i == 9:
		return _HubEventTypeName_2
	default:
		return fmt.Sprintf("HubEventType(%d)", i)
	}
}

func (HubEventType) Values() []string {
	return HubEventTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HubEventTypeNoOp() {
	var x [1]struct{}
	_ = x[HubEventTypeNone-(0)]
	_ = x[HubEventTypeMergeMessage-(1)]
	_ = x[HubEventTypePruneMessage-(2)]
	_ = x[HubEventTypeRevokeMessage-(3)]
	_ = x[HubEventTypeMergeUsernameProof-(6)]
	_ = x[HubEventTypeMergeOnChainEvent-(9)]
}

var _HubEventTypeValues = []HubEventType{HubEventTypeNone, HubEventTypeMergeMessage, HubEventTypePruneMessage, HubEventTypeRevokeMessage, HubEventTypeMergeUsernameProof, HubEventTypeMergeOnChainEvent}

var _HubEventTypeNameToValueMap = map[string]HubEventType{
	_HubEventTypeName_0[0:19]:        HubEventTypeNone,
	_HubEventTypeLowerName_0[0:19]:   HubEventTypeNone,
	_HubEventTypeName_0[19:47]:       HubEventTypeMergeMessage,
	_HubEventTypeLowerName_0[19:47]:  HubEventTypeMergeMessage,
	_HubEventTypeName_0[47:75]:       HubEventTypePruneMessage,
	_HubEventTypeLowerName_0[47:75]:  HubEventTypePruneMessage,
	_HubEventTypeName_0[75:104]:      HubEventTypeRevokeMessage,
	_HubEventTypeLowerName_0[75:104]: HubEventTypeRevokeMessage,
	_HubEventTypeName_1[0:35]:        HubEventTypeMergeUsernameProof,
	_HubEventTypeLowerName_1[0:35]:   HubEventTypeMergeUsernameProof,
	_HubEventTypeName_2[0:35]:        HubEventTypeMergeOnChainEvent,
	_HubEventTypeLowerName_2[0:35]:   HubEventTypeMergeOnChainEvent,
}

var _HubEventTypeNames = []string{
	_HubEventTypeName_0[0:19],
	_HubEventTypeName_0[19:47],
	_HubEventTypeName_0[47:75],
	_HubEventTypeName_0[75:104],
	_HubEventTypeName_1[0:35],
	_HubEventTypeName_2[0:35],
}

// HubEventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HubEventTypeString(s string) (HubEventType, error) {
	if val, ok := _HubEventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HubEventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HubEventType values", s)
}

// HubEventTypeValues returns all values of the enum
func HubEventTypeValues() []HubEventType {
	return _HubEventTypeValues
}

// HubEventTypeStrings returns a slice of all String values of the enum
func HubEventTypeStrings() []string {
	strs := make([]string, len(_HubEventTypeNames))
	copy(strs, _HubEventTypeNames)
	return strs
}

// IsAHubEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HubEventType) IsAHubEventType() bool {
	for _, v := range _HubEventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
