// Code generated by "enumer --values --type=MessageType --output type_message.go --transform=snake-upper"; DO NOT EDIT.

package farcaster

import (
	"fmt"
	"strings"
)

const (
	_MessageTypeName_0      = "MESSAGE_TYPE_NONEMESSAGE_TYPE_CAST_ADDMESSAGE_TYPE_CAST_REMOVEMESSAGE_TYPE_REACTION_ADDMESSAGE_TYPE_REACTION_REMOVEMESSAGE_TYPE_LINK_ADDMESSAGE_TYPE_LINK_REMOVEMESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESSMESSAGE_TYPE_VERIFICATION_REMOVE"
	_MessageTypeLowerName_0 = "message_type_nonemessage_type_cast_addmessage_type_cast_removemessage_type_reaction_addmessage_type_reaction_removemessage_type_link_addmessage_type_link_removemessage_type_verification_add_eth_addressmessage_type_verification_remove"
	_MessageTypeName_1      = "MESSAGE_TYPE_USER_DATA_ADDMESSAGE_TYPE_USERNAME_PROOF"
	_MessageTypeLowerName_1 = "message_type_user_data_addmessage_type_username_proof"
)

var (
	_MessageTypeIndex_0 = [...]uint8{0, 17, 38, 62, 87, 115, 136, 160, 201, 233}
	_MessageTypeIndex_1 = [...]uint8{0, 26, 53}
)

func (i MessageType) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _MessageTypeName_0[_MessageTypeIndex_0[i]:_MessageTypeIndex_0[i+1]]
	case 11 <= i && i <= 12:
		i -= 11
		return _MessageTypeName_1[_MessageTypeIndex_1[i]:_MessageTypeIndex_1[i+1]]
	default:
		return fmt.Sprintf("MessageType(%d)", i)
	}
}

func (MessageType) Values() []string {
	return MessageTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MessageTypeNoOp() {
	var x [1]struct{}
	_ = x[MessageTypeNone-(0)]
	_ = x[MessageTypeCastAdd-(1)]
	_ = x[MessageTypeCastRemove-(2)]
	_ = x[MessageTypeReactionAdd-(3)]
	_ = x[MessageTypeReactionRemove-(4)]
	_ = x[MessageTypeLinkAdd-(5)]
	_ = x[MessageTypeLinkRemove-(6)]
	_ = x[MessageTypeVerificationAddEthAddress-(7)]
	_ = x[MessageTypeVerificationRemove-(8)]
	_ = x[MessageTypeUserDataAdd-(11)]
	_ = x[MessageTypeUsernameProof-(12)]
}

var _MessageTypeValues = []MessageType{MessageTypeNone, MessageTypeCastAdd, MessageTypeCastRemove, MessageTypeReactionAdd, MessageTypeReactionRemove, MessageTypeLinkAdd, MessageTypeLinkRemove, MessageTypeVerificationAddEthAddress, MessageTypeVerificationRemove, MessageTypeUserDataAdd, MessageTypeUsernameProof}

var _MessageTypeNameToValueMap = map[string]MessageType{
	_MessageTypeName_0[0:17]:         MessageTypeNone,
	_MessageTypeLowerName_0[0:17]:    MessageTypeNone,
	_MessageTypeName_0[17:38]:        MessageTypeCastAdd,
	_MessageTypeLowerName_0[17:38]:   MessageTypeCastAdd,
	_MessageTypeName_0[38:62]:        MessageTypeCastRemove,
	_MessageTypeLowerName_0[38:62]:   MessageTypeCastRemove,
	_MessageTypeName_0[62:87]:        MessageTypeReactionAdd,
	_MessageTypeLowerName_0[62:87]:   MessageTypeReactionAdd,
	_MessageTypeName_0[87:115]:       MessageTypeReactionRemove,
	_MessageTypeLowerName_0[87:115]:  MessageTypeReactionRemove,
	_MessageTypeName_0[115:136]:      MessageTypeLinkAdd,
	_MessageTypeLowerName_0[115:136]: MessageTypeLinkAdd,
	_MessageTypeName_0[136:160]:      MessageTypeLinkRemove,
	_MessageTypeLowerName_0[136:160]: MessageTypeLinkRemove,
	_MessageTypeName_0[160:201]:      MessageTypeVerificationAddEthAddress,
	_MessageTypeLowerName_0[160:201]: MessageTypeVerificationAddEthAddress,
	_MessageTypeName_0[201:233]:      MessageTypeVerificationRemove,
	_MessageTypeLowerName_0[201:233]: MessageTypeVerificationRemove,
	_MessageTypeName_1[0:26]:         MessageTypeUserDataAdd,
	_MessageTypeLowerName_1[0:26]:    MessageTypeUserDataAdd,
	_MessageTypeName_1[26:53]:        MessageTypeUsernameProof,
	_MessageTypeLowerName_1[26:53]:   MessageTypeUsernameProof,
}

var _MessageTypeNames = []string{
	_MessageTypeName_0[0:17],
	_MessageTypeName_0[17:38],
	_MessageTypeName_0[38:62],
	_MessageTypeName_0[62:87],
	_MessageTypeName_0[87:115],
	_MessageTypeName_0[115:136],
	_MessageTypeName_0[136:160],
	_MessageTypeName_0[160:201],
	_MessageTypeName_0[201:233],
	_MessageTypeName_1[0:26],
	_MessageTypeName_1[26:53],
}

// MessageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MessageTypeString(s string) (MessageType, error) {
	if val, ok := _MessageTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MessageTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MessageType values", s)
}

// MessageTypeValues returns all values of the enum
func MessageTypeValues() []MessageType {
	return _MessageTypeValues
}

// MessageTypeStrings returns a slice of all String values of the enum
func MessageTypeStrings() []string {
	strs := make([]string, len(_MessageTypeNames))
	copy(strs, _MessageTypeNames)
	return strs
}

// IsAMessageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MessageType) IsAMessageType() bool {
	for _, v := range _MessageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
