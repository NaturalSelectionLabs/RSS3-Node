// Code generated by "enumer --values --type=AccountType --output type_account.go --transform=snake-upper"; DO NOT EDIT.

package farcaster

import (
	"fmt"
	"strings"
)

const _AccountTypeName = "PROTOCOL_ETHEREUMPROTOCOL_SOLANA"

var _AccountTypeIndex = [...]uint8{0, 17, 32}

const _AccountTypeLowerName = "protocol_ethereumprotocol_solana"

func (i AccountType) String() string {
	if i < 0 || i >= AccountType(len(_AccountTypeIndex)-1) {
		return fmt.Sprintf("AccountType(%d)", i)
	}
	return _AccountTypeName[_AccountTypeIndex[i]:_AccountTypeIndex[i+1]]
}

func (AccountType) Values() []string {
	return AccountTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccountTypeNoOp() {
	var x [1]struct{}
	_ = x[ProtocolEthereum-(0)]
	_ = x[ProtocolSolana-(1)]
}

var _AccountTypeValues = []AccountType{ProtocolEthereum, ProtocolSolana}

var _AccountTypeNameToValueMap = map[string]AccountType{
	_AccountTypeName[0:17]:       ProtocolEthereum,
	_AccountTypeLowerName[0:17]:  ProtocolEthereum,
	_AccountTypeName[17:32]:      ProtocolSolana,
	_AccountTypeLowerName[17:32]: ProtocolSolana,
}

var _AccountTypeNames = []string{
	_AccountTypeName[0:17],
	_AccountTypeName[17:32],
}

// AccountTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccountTypeString(s string) (AccountType, error) {
	if val, ok := _AccountTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccountTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccountType values", s)
}

// AccountTypeValues returns all values of the enum
func AccountTypeValues() []AccountType {
	return _AccountTypeValues
}

// AccountTypeStrings returns a slice of all String values of the enum
func AccountTypeStrings() []string {
	strs := make([]string, len(_AccountTypeNames))
	copy(strs, _AccountTypeNames)
	return strs
}

// IsAAccountType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccountType) IsAAccountType() bool {
	for _, v := range _AccountTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
