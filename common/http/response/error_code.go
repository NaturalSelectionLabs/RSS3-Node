// Code generated by "enumer --type=ErrorCode --transform=snake --values --trimprefix=ErrorCode --json --output error_code.go"; DO NOT EDIT.

package response

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ErrorCodeName = "bad_requestvalidate_failedbad_paramsaddress_is_emptyaddress_is_invalidinternal_errornot_found"

var _ErrorCodeIndex = [...]uint8{0, 11, 26, 36, 52, 70, 84, 93}

const _ErrorCodeLowerName = "bad_requestvalidate_failedbad_paramsaddress_is_emptyaddress_is_invalidinternal_errornot_found"

func (i ErrorCode) String() string {
	i -= 1
	if i < 0 || i >= ErrorCode(len(_ErrorCodeIndex)-1) {
		return fmt.Sprintf("ErrorCode(%d)", i+1)
	}
	return _ErrorCodeName[_ErrorCodeIndex[i]:_ErrorCodeIndex[i+1]]
}

func (ErrorCode) Values() []string {
	return ErrorCodeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ErrorCodeNoOp() {
	var x [1]struct{}
	_ = x[ErrorCodeBadRequest-(1)]
	_ = x[ErrorCodeValidateFailed-(2)]
	_ = x[ErrorCodeBadParams-(3)]
	_ = x[ErrorCodeAddressIsEmpty-(4)]
	_ = x[ErrorCodeAddressIsInvalid-(5)]
	_ = x[ErrorCodeInternalError-(6)]
	_ = x[ErrorCodeNotFound-(7)]
}

var _ErrorCodeValues = []ErrorCode{ErrorCodeBadRequest, ErrorCodeValidateFailed, ErrorCodeBadParams, ErrorCodeAddressIsEmpty, ErrorCodeAddressIsInvalid, ErrorCodeInternalError, ErrorCodeNotFound}

var _ErrorCodeNameToValueMap = map[string]ErrorCode{
	_ErrorCodeName[0:11]:       ErrorCodeBadRequest,
	_ErrorCodeLowerName[0:11]:  ErrorCodeBadRequest,
	_ErrorCodeName[11:26]:      ErrorCodeValidateFailed,
	_ErrorCodeLowerName[11:26]: ErrorCodeValidateFailed,
	_ErrorCodeName[26:36]:      ErrorCodeBadParams,
	_ErrorCodeLowerName[26:36]: ErrorCodeBadParams,
	_ErrorCodeName[36:52]:      ErrorCodeAddressIsEmpty,
	_ErrorCodeLowerName[36:52]: ErrorCodeAddressIsEmpty,
	_ErrorCodeName[52:70]:      ErrorCodeAddressIsInvalid,
	_ErrorCodeLowerName[52:70]: ErrorCodeAddressIsInvalid,
	_ErrorCodeName[70:84]:      ErrorCodeInternalError,
	_ErrorCodeLowerName[70:84]: ErrorCodeInternalError,
	_ErrorCodeName[84:93]:      ErrorCodeNotFound,
	_ErrorCodeLowerName[84:93]: ErrorCodeNotFound,
}

var _ErrorCodeNames = []string{
	_ErrorCodeName[0:11],
	_ErrorCodeName[11:26],
	_ErrorCodeName[26:36],
	_ErrorCodeName[36:52],
	_ErrorCodeName[52:70],
	_ErrorCodeName[70:84],
	_ErrorCodeName[84:93],
}

// ErrorCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ErrorCodeString(s string) (ErrorCode, error) {
	if val, ok := _ErrorCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ErrorCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ErrorCode values", s)
}

// ErrorCodeValues returns all values of the enum
func ErrorCodeValues() []ErrorCode {
	return _ErrorCodeValues
}

// ErrorCodeStrings returns a slice of all String values of the enum
func ErrorCodeStrings() []string {
	strs := make([]string, len(_ErrorCodeNames))
	copy(strs, _ErrorCodeNames)
	return strs
}

// IsAErrorCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ErrorCode) IsAErrorCode() bool {
	for _, v := range _ErrorCodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ErrorCode
func (i ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ErrorCode
func (i *ErrorCode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ErrorCode should be a string, got %s", data)
	}

	var err error
	*i, err = ErrorCodeString(s)
	return err
}
