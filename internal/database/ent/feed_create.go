// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naturalselectionlabs/rss3-node/internal/database/ent/feed"
	"github.com/naturalselectionlabs/rss3-node/schema"
	"github.com/shopspring/decimal"
)

// FeedCreate is the builder for creating a Feed entity.
type FeedCreate struct {
	config
	mutation *FeedMutation
	hooks    []Hook
}

// SetChain sets the "chain" field.
func (fc *FeedCreate) SetChain(s string) *FeedCreate {
	fc.mutation.SetChain(s)
	return fc
}

// SetPlatform sets the "platform" field.
func (fc *FeedCreate) SetPlatform(s string) *FeedCreate {
	fc.mutation.SetPlatform(s)
	return fc
}

// SetFrom sets the "from" field.
func (fc *FeedCreate) SetFrom(s string) *FeedCreate {
	fc.mutation.SetFrom(s)
	return fc
}

// SetTo sets the "to" field.
func (fc *FeedCreate) SetTo(s string) *FeedCreate {
	fc.mutation.SetTo(s)
	return fc
}

// SetTag sets the "tag" field.
func (fc *FeedCreate) SetTag(s string) *FeedCreate {
	fc.mutation.SetTag(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FeedCreate) SetType(s string) *FeedCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetStatus sets the "status" field.
func (fc *FeedCreate) SetStatus(s string) *FeedCreate {
	fc.mutation.SetStatus(s)
	return fc
}

// SetIndex sets the "index" field.
func (fc *FeedCreate) SetIndex(u uint) *FeedCreate {
	fc.mutation.SetIndex(u)
	return fc
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (fc *FeedCreate) SetNillableIndex(u *uint) *FeedCreate {
	if u != nil {
		fc.SetIndex(*u)
	}
	return fc
}

// SetTotalActions sets the "total_actions" field.
func (fc *FeedCreate) SetTotalActions(u uint) *FeedCreate {
	fc.mutation.SetTotalActions(u)
	return fc
}

// SetNillableTotalActions sets the "total_actions" field if the given value is not nil.
func (fc *FeedCreate) SetNillableTotalActions(u *uint) *FeedCreate {
	if u != nil {
		fc.SetTotalActions(*u)
	}
	return fc
}

// SetActions sets the "actions" field.
func (fc *FeedCreate) SetActions(s []schema.Action) *FeedCreate {
	fc.mutation.SetActions(s)
	return fc
}

// SetFeeValue sets the "fee_value" field.
func (fc *FeedCreate) SetFeeValue(d decimal.Decimal) *FeedCreate {
	fc.mutation.SetFeeValue(d)
	return fc
}

// SetFeeToken sets the "fee_token" field.
func (fc *FeedCreate) SetFeeToken(s string) *FeedCreate {
	fc.mutation.SetFeeToken(s)
	return fc
}

// SetTimestamp sets the "timestamp" field.
func (fc *FeedCreate) SetTimestamp(t time.Time) *FeedCreate {
	fc.mutation.SetTimestamp(t)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedCreate) SetCreatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableCreatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedCreate) SetUpdatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableUpdatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeedCreate) SetID(s string) *FeedCreate {
	fc.mutation.SetID(s)
	return fc
}

// Mutation returns the FeedMutation object of the builder.
func (fc *FeedCreate) Mutation() *FeedMutation {
	return fc.mutation
}

// Save creates the Feed in the database.
func (fc *FeedCreate) Save(ctx context.Context) (*Feed, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedCreate) SaveX(ctx context.Context) *Feed {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedCreate) defaults() {
	if _, ok := fc.mutation.Index(); !ok {
		v := feed.DefaultIndex
		fc.mutation.SetIndex(v)
	}
	if _, ok := fc.mutation.TotalActions(); !ok {
		v := feed.DefaultTotalActions
		fc.mutation.SetTotalActions(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := feed.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := feed.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedCreate) check() error {
	if _, ok := fc.mutation.Chain(); !ok {
		return &ValidationError{Name: "chain", err: errors.New(`ent: missing required field "Feed.chain"`)}
	}
	if v, ok := fc.mutation.Chain(); ok {
		if err := feed.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`ent: validator failed for field "Feed.chain": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Feed.platform"`)}
	}
	if _, ok := fc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Feed.from"`)}
	}
	if v, ok := fc.mutation.From(); ok {
		if err := feed.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Feed.from": %w`, err)}
		}
	}
	if _, ok := fc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Feed.to"`)}
	}
	if v, ok := fc.mutation.To(); ok {
		if err := feed.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Feed.to": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Feed.tag"`)}
	}
	if v, ok := fc.mutation.Tag(); ok {
		if err := feed.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Feed.tag": %w`, err)}
		}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Feed.type"`)}
	}
	if v, ok := fc.mutation.GetType(); ok {
		if err := feed.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Feed.type": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Feed.status"`)}
	}
	if v, ok := fc.mutation.Status(); ok {
		if err := feed.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Feed.status": %w`, err)}
		}
	}
	if _, ok := fc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Feed.index"`)}
	}
	if _, ok := fc.mutation.TotalActions(); !ok {
		return &ValidationError{Name: "total_actions", err: errors.New(`ent: missing required field "Feed.total_actions"`)}
	}
	if _, ok := fc.mutation.Actions(); !ok {
		return &ValidationError{Name: "actions", err: errors.New(`ent: missing required field "Feed.actions"`)}
	}
	if _, ok := fc.mutation.FeeValue(); !ok {
		return &ValidationError{Name: "fee_value", err: errors.New(`ent: missing required field "Feed.fee_value"`)}
	}
	if _, ok := fc.mutation.FeeToken(); !ok {
		return &ValidationError{Name: "fee_token", err: errors.New(`ent: missing required field "Feed.fee_token"`)}
	}
	if _, ok := fc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Feed.timestamp"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Feed.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Feed.updated_at"`)}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := feed.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Feed.id": %w`, err)}
		}
	}
	return nil
}

func (fc *FeedCreate) sqlSave(ctx context.Context) (*Feed, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Feed.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeedCreate) createSpec() (*Feed, *sqlgraph.CreateSpec) {
	var (
		_node = &Feed{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(feed.Table, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Chain(); ok {
		_spec.SetField(feed.FieldChain, field.TypeString, value)
		_node.Chain = value
	}
	if value, ok := fc.mutation.Platform(); ok {
		_spec.SetField(feed.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := fc.mutation.From(); ok {
		_spec.SetField(feed.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := fc.mutation.To(); ok {
		_spec.SetField(feed.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := fc.mutation.Tag(); ok {
		_spec.SetField(feed.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(feed.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(feed.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.Index(); ok {
		_spec.SetField(feed.FieldIndex, field.TypeUint, value)
		_node.Index = value
	}
	if value, ok := fc.mutation.TotalActions(); ok {
		_spec.SetField(feed.FieldTotalActions, field.TypeUint, value)
		_node.TotalActions = value
	}
	if value, ok := fc.mutation.Actions(); ok {
		_spec.SetField(feed.FieldActions, field.TypeJSON, value)
		_node.Actions = value
	}
	if value, ok := fc.mutation.FeeValue(); ok {
		_spec.SetField(feed.FieldFeeValue, field.TypeOther, value)
		_node.FeeValue = value
	}
	if value, ok := fc.mutation.FeeToken(); ok {
		_spec.SetField(feed.FieldFeeToken, field.TypeString, value)
		_node.FeeToken = value
	}
	if value, ok := fc.mutation.Timestamp(); ok {
		_spec.SetField(feed.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// FeedCreateBulk is the builder for creating many Feed entities in bulk.
type FeedCreateBulk struct {
	config
	err      error
	builders []*FeedCreate
}

// Save creates the Feed entities in the database.
func (fcb *FeedCreateBulk) Save(ctx context.Context) ([]*Feed, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feed, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedCreateBulk) SaveX(ctx context.Context) []*Feed {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
