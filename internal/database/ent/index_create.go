// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/naturalselectionlabs/rss3-node/internal/database/ent/index"
)

// IndexCreate is the builder for creating a Index entity.
type IndexCreate struct {
	config
	mutation *IndexMutation
	hooks    []Hook
}

// SetFeedID sets the "feed_id" field.
func (ic *IndexCreate) SetFeedID(s string) *IndexCreate {
	ic.mutation.SetFeedID(s)
	return ic
}

// SetOwner sets the "owner" field.
func (ic *IndexCreate) SetOwner(s string) *IndexCreate {
	ic.mutation.SetOwner(s)
	return ic
}

// SetChain sets the "chain" field.
func (ic *IndexCreate) SetChain(s string) *IndexCreate {
	ic.mutation.SetChain(s)
	return ic
}

// SetPlatform sets the "platform" field.
func (ic *IndexCreate) SetPlatform(s string) *IndexCreate {
	ic.mutation.SetPlatform(s)
	return ic
}

// SetTag sets the "tag" field.
func (ic *IndexCreate) SetTag(s string) *IndexCreate {
	ic.mutation.SetTag(s)
	return ic
}

// SetType sets the "type" field.
func (ic *IndexCreate) SetType(s string) *IndexCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetStatus sets the "status" field.
func (ic *IndexCreate) SetStatus(s string) *IndexCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetDirection sets the "direction" field.
func (ic *IndexCreate) SetDirection(s string) *IndexCreate {
	ic.mutation.SetDirection(s)
	return ic
}

// SetIndex sets the "index" field.
func (ic *IndexCreate) SetIndex(u uint) *IndexCreate {
	ic.mutation.SetIndex(u)
	return ic
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ic *IndexCreate) SetNillableIndex(u *uint) *IndexCreate {
	if u != nil {
		ic.SetIndex(*u)
	}
	return ic
}

// SetTimestamp sets the "timestamp" field.
func (ic *IndexCreate) SetTimestamp(t time.Time) *IndexCreate {
	ic.mutation.SetTimestamp(t)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IndexCreate) SetCreatedAt(t time.Time) *IndexCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IndexCreate) SetNillableCreatedAt(t *time.Time) *IndexCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IndexCreate) SetUpdatedAt(t time.Time) *IndexCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IndexCreate) SetNillableUpdatedAt(t *time.Time) *IndexCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IndexCreate) SetID(u uuid.UUID) *IndexCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IndexCreate) SetNillableID(u *uuid.UUID) *IndexCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// Mutation returns the IndexMutation object of the builder.
func (ic *IndexCreate) Mutation() *IndexMutation {
	return ic.mutation
}

// Save creates the Index in the database.
func (ic *IndexCreate) Save(ctx context.Context) (*Index, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IndexCreate) SaveX(ctx context.Context) *Index {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IndexCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IndexCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IndexCreate) defaults() {
	if _, ok := ic.mutation.Index(); !ok {
		v := index.DefaultIndex
		ic.mutation.SetIndex(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := index.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := index.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := index.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IndexCreate) check() error {
	if _, ok := ic.mutation.FeedID(); !ok {
		return &ValidationError{Name: "feed_id", err: errors.New(`ent: missing required field "Index.feed_id"`)}
	}
	if _, ok := ic.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Index.owner"`)}
	}
	if v, ok := ic.mutation.Owner(); ok {
		if err := index.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Index.owner": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Chain(); !ok {
		return &ValidationError{Name: "chain", err: errors.New(`ent: missing required field "Index.chain"`)}
	}
	if v, ok := ic.mutation.Chain(); ok {
		if err := index.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`ent: validator failed for field "Index.chain": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Index.platform"`)}
	}
	if _, ok := ic.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Index.tag"`)}
	}
	if v, ok := ic.mutation.Tag(); ok {
		if err := index.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Index.tag": %w`, err)}
		}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Index.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := index.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Index.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Index.status"`)}
	}
	if v, ok := ic.mutation.Status(); ok {
		if err := index.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Index.status": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required field "Index.direction"`)}
	}
	if v, ok := ic.mutation.Direction(); ok {
		if err := index.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Index.direction": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "Index.index"`)}
	}
	if _, ok := ic.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "Index.timestamp"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Index.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Index.updated_at"`)}
	}
	return nil
}

func (ic *IndexCreate) sqlSave(ctx context.Context) (*Index, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IndexCreate) createSpec() (*Index, *sqlgraph.CreateSpec) {
	var (
		_node = &Index{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(index.Table, sqlgraph.NewFieldSpec(index.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.FeedID(); ok {
		_spec.SetField(index.FieldFeedID, field.TypeString, value)
		_node.FeedID = value
	}
	if value, ok := ic.mutation.Owner(); ok {
		_spec.SetField(index.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := ic.mutation.Chain(); ok {
		_spec.SetField(index.FieldChain, field.TypeString, value)
		_node.Chain = value
	}
	if value, ok := ic.mutation.Platform(); ok {
		_spec.SetField(index.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := ic.mutation.Tag(); ok {
		_spec.SetField(index.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(index.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(index.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.Direction(); ok {
		_spec.SetField(index.FieldDirection, field.TypeString, value)
		_node.Direction = value
	}
	if value, ok := ic.mutation.Index(); ok {
		_spec.SetField(index.FieldIndex, field.TypeUint, value)
		_node.Index = value
	}
	if value, ok := ic.mutation.Timestamp(); ok {
		_spec.SetField(index.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(index.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(index.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// IndexCreateBulk is the builder for creating many Index entities in bulk.
type IndexCreateBulk struct {
	config
	err      error
	builders []*IndexCreate
}

// Save creates the Index entities in the database.
func (icb *IndexCreateBulk) Save(ctx context.Context) ([]*Index, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Index, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IndexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IndexCreateBulk) SaveX(ctx context.Context) []*Index {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IndexCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IndexCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
