// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naturalselectionlabs/rss3-node/internal/database/ent/index"
	"github.com/naturalselectionlabs/rss3-node/internal/database/ent/predicate"
)

// IndexUpdate is the builder for updating Index entities.
type IndexUpdate struct {
	config
	hooks    []Hook
	mutation *IndexMutation
}

// Where appends a list predicates to the IndexUpdate builder.
func (iu *IndexUpdate) Where(ps ...predicate.Index) *IndexUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetFeedID sets the "feed_id" field.
func (iu *IndexUpdate) SetFeedID(s string) *IndexUpdate {
	iu.mutation.SetFeedID(s)
	return iu
}

// SetNillableFeedID sets the "feed_id" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableFeedID(s *string) *IndexUpdate {
	if s != nil {
		iu.SetFeedID(*s)
	}
	return iu
}

// SetOwner sets the "owner" field.
func (iu *IndexUpdate) SetOwner(s string) *IndexUpdate {
	iu.mutation.SetOwner(s)
	return iu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableOwner(s *string) *IndexUpdate {
	if s != nil {
		iu.SetOwner(*s)
	}
	return iu
}

// SetChain sets the "chain" field.
func (iu *IndexUpdate) SetChain(s string) *IndexUpdate {
	iu.mutation.SetChain(s)
	return iu
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableChain(s *string) *IndexUpdate {
	if s != nil {
		iu.SetChain(*s)
	}
	return iu
}

// SetPlatform sets the "platform" field.
func (iu *IndexUpdate) SetPlatform(s string) *IndexUpdate {
	iu.mutation.SetPlatform(s)
	return iu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (iu *IndexUpdate) SetNillablePlatform(s *string) *IndexUpdate {
	if s != nil {
		iu.SetPlatform(*s)
	}
	return iu
}

// SetTag sets the "tag" field.
func (iu *IndexUpdate) SetTag(s string) *IndexUpdate {
	iu.mutation.SetTag(s)
	return iu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableTag(s *string) *IndexUpdate {
	if s != nil {
		iu.SetTag(*s)
	}
	return iu
}

// SetType sets the "type" field.
func (iu *IndexUpdate) SetType(s string) *IndexUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableType(s *string) *IndexUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetStatus sets the "status" field.
func (iu *IndexUpdate) SetStatus(s string) *IndexUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableStatus(s *string) *IndexUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetDirection sets the "direction" field.
func (iu *IndexUpdate) SetDirection(s string) *IndexUpdate {
	iu.mutation.SetDirection(s)
	return iu
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableDirection(s *string) *IndexUpdate {
	if s != nil {
		iu.SetDirection(*s)
	}
	return iu
}

// SetIndex sets the "index" field.
func (iu *IndexUpdate) SetIndex(i int) *IndexUpdate {
	iu.mutation.ResetIndex()
	iu.mutation.SetIndex(i)
	return iu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableIndex(i *int) *IndexUpdate {
	if i != nil {
		iu.SetIndex(*i)
	}
	return iu
}

// AddIndex adds i to the "index" field.
func (iu *IndexUpdate) AddIndex(i int) *IndexUpdate {
	iu.mutation.AddIndex(i)
	return iu
}

// SetTimestamp sets the "timestamp" field.
func (iu *IndexUpdate) SetTimestamp(t time.Time) *IndexUpdate {
	iu.mutation.SetTimestamp(t)
	return iu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableTimestamp(t *time.Time) *IndexUpdate {
	if t != nil {
		iu.SetTimestamp(*t)
	}
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IndexUpdate) SetCreatedAt(t time.Time) *IndexUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IndexUpdate) SetNillableCreatedAt(t *time.Time) *IndexUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IndexUpdate) SetUpdatedAt(t time.Time) *IndexUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// Mutation returns the IndexMutation object of the builder.
func (iu *IndexUpdate) Mutation() *IndexMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IndexUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IndexUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IndexUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IndexUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IndexUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := index.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IndexUpdate) check() error {
	if v, ok := iu.mutation.Owner(); ok {
		if err := index.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Index.owner": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Chain(); ok {
		if err := index.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`ent: validator failed for field "Index.chain": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Tag(); ok {
		if err := index.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Index.tag": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := index.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Index.type": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Status(); ok {
		if err := index.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Index.status": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Direction(); ok {
		if err := index.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Index.direction": %w`, err)}
		}
	}
	return nil
}

func (iu *IndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(index.Table, index.Columns, sqlgraph.NewFieldSpec(index.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.FeedID(); ok {
		_spec.SetField(index.FieldFeedID, field.TypeString, value)
	}
	if value, ok := iu.mutation.Owner(); ok {
		_spec.SetField(index.FieldOwner, field.TypeString, value)
	}
	if value, ok := iu.mutation.Chain(); ok {
		_spec.SetField(index.FieldChain, field.TypeString, value)
	}
	if value, ok := iu.mutation.Platform(); ok {
		_spec.SetField(index.FieldPlatform, field.TypeString, value)
	}
	if value, ok := iu.mutation.Tag(); ok {
		_spec.SetField(index.FieldTag, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(index.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(index.FieldStatus, field.TypeString, value)
	}
	if value, ok := iu.mutation.Direction(); ok {
		_spec.SetField(index.FieldDirection, field.TypeString, value)
	}
	if value, ok := iu.mutation.Index(); ok {
		_spec.SetField(index.FieldIndex, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedIndex(); ok {
		_spec.AddField(index.FieldIndex, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Timestamp(); ok {
		_spec.SetField(index.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(index.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(index.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{index.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IndexUpdateOne is the builder for updating a single Index entity.
type IndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IndexMutation
}

// SetFeedID sets the "feed_id" field.
func (iuo *IndexUpdateOne) SetFeedID(s string) *IndexUpdateOne {
	iuo.mutation.SetFeedID(s)
	return iuo
}

// SetNillableFeedID sets the "feed_id" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableFeedID(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetFeedID(*s)
	}
	return iuo
}

// SetOwner sets the "owner" field.
func (iuo *IndexUpdateOne) SetOwner(s string) *IndexUpdateOne {
	iuo.mutation.SetOwner(s)
	return iuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableOwner(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetOwner(*s)
	}
	return iuo
}

// SetChain sets the "chain" field.
func (iuo *IndexUpdateOne) SetChain(s string) *IndexUpdateOne {
	iuo.mutation.SetChain(s)
	return iuo
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableChain(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetChain(*s)
	}
	return iuo
}

// SetPlatform sets the "platform" field.
func (iuo *IndexUpdateOne) SetPlatform(s string) *IndexUpdateOne {
	iuo.mutation.SetPlatform(s)
	return iuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillablePlatform(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetPlatform(*s)
	}
	return iuo
}

// SetTag sets the "tag" field.
func (iuo *IndexUpdateOne) SetTag(s string) *IndexUpdateOne {
	iuo.mutation.SetTag(s)
	return iuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableTag(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetTag(*s)
	}
	return iuo
}

// SetType sets the "type" field.
func (iuo *IndexUpdateOne) SetType(s string) *IndexUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableType(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IndexUpdateOne) SetStatus(s string) *IndexUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableStatus(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetDirection sets the "direction" field.
func (iuo *IndexUpdateOne) SetDirection(s string) *IndexUpdateOne {
	iuo.mutation.SetDirection(s)
	return iuo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableDirection(s *string) *IndexUpdateOne {
	if s != nil {
		iuo.SetDirection(*s)
	}
	return iuo
}

// SetIndex sets the "index" field.
func (iuo *IndexUpdateOne) SetIndex(i int) *IndexUpdateOne {
	iuo.mutation.ResetIndex()
	iuo.mutation.SetIndex(i)
	return iuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableIndex(i *int) *IndexUpdateOne {
	if i != nil {
		iuo.SetIndex(*i)
	}
	return iuo
}

// AddIndex adds i to the "index" field.
func (iuo *IndexUpdateOne) AddIndex(i int) *IndexUpdateOne {
	iuo.mutation.AddIndex(i)
	return iuo
}

// SetTimestamp sets the "timestamp" field.
func (iuo *IndexUpdateOne) SetTimestamp(t time.Time) *IndexUpdateOne {
	iuo.mutation.SetTimestamp(t)
	return iuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableTimestamp(t *time.Time) *IndexUpdateOne {
	if t != nil {
		iuo.SetTimestamp(*t)
	}
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IndexUpdateOne) SetCreatedAt(t time.Time) *IndexUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IndexUpdateOne) SetNillableCreatedAt(t *time.Time) *IndexUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IndexUpdateOne) SetUpdatedAt(t time.Time) *IndexUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// Mutation returns the IndexMutation object of the builder.
func (iuo *IndexUpdateOne) Mutation() *IndexMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IndexUpdate builder.
func (iuo *IndexUpdateOne) Where(ps ...predicate.Index) *IndexUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IndexUpdateOne) Select(field string, fields ...string) *IndexUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Index entity.
func (iuo *IndexUpdateOne) Save(ctx context.Context) (*Index, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IndexUpdateOne) SaveX(ctx context.Context) *Index {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IndexUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IndexUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IndexUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := index.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IndexUpdateOne) check() error {
	if v, ok := iuo.mutation.Owner(); ok {
		if err := index.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Index.owner": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Chain(); ok {
		if err := index.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`ent: validator failed for field "Index.chain": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Tag(); ok {
		if err := index.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "Index.tag": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := index.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Index.type": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Status(); ok {
		if err := index.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Index.status": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Direction(); ok {
		if err := index.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`ent: validator failed for field "Index.direction": %w`, err)}
		}
	}
	return nil
}

func (iuo *IndexUpdateOne) sqlSave(ctx context.Context) (_node *Index, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(index.Table, index.Columns, sqlgraph.NewFieldSpec(index.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Index.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, index.FieldID)
		for _, f := range fields {
			if !index.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != index.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.FeedID(); ok {
		_spec.SetField(index.FieldFeedID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Owner(); ok {
		_spec.SetField(index.FieldOwner, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Chain(); ok {
		_spec.SetField(index.FieldChain, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Platform(); ok {
		_spec.SetField(index.FieldPlatform, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Tag(); ok {
		_spec.SetField(index.FieldTag, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(index.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(index.FieldStatus, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Direction(); ok {
		_spec.SetField(index.FieldDirection, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Index(); ok {
		_spec.SetField(index.FieldIndex, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedIndex(); ok {
		_spec.AddField(index.FieldIndex, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Timestamp(); ok {
		_spec.SetField(index.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(index.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(index.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Index{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{index.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
