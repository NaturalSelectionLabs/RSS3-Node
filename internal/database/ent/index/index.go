// Code generated by ent, DO NOT EDIT.

package index

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the index type in the database.
	Label = "index"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldFeedID holds the string denoting the feed_id field in the database.
	FieldFeedID = "feed_id"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldChain holds the string denoting the chain field in the database.
	FieldChain = "chain"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the index in the database.
	Table = "indexes"
)

// Columns holds all SQL columns for index fields.
var Columns = []string{
	FieldID,
	FieldFeedID,
	FieldOwner,
	FieldChain,
	FieldPlatform,
	FieldTag,
	FieldType,
	FieldStatus,
	FieldDirection,
	FieldIndex,
	FieldTimestamp,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// ChainValidator is a validator for the "chain" field. It is called by the builders before save.
	ChainValidator func(string) error
	// TagValidator is a validator for the "tag" field. It is called by the builders before save.
	TagValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DirectionValidator is a validator for the "direction" field. It is called by the builders before save.
	DirectionValidator func(string) error
	// DefaultIndex holds the default value on creation for the "index" field.
	DefaultIndex int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Index queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeedID orders the results by the feed_id field.
func ByFeedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedID, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByChain orders the results by the chain field.
func ByChain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChain, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDirection orders the results by the direction field.
func ByDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirection, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
