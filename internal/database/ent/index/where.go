// Code generated by ent, DO NOT EDIT.

package index

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/naturalselectionlabs/rss3-node/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldID, id))
}

// FeedID applies equality check predicate on the "feed_id" field. It's identical to FeedIDEQ.
func FeedID(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldFeedID, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldOwner, v))
}

// Chain applies equality check predicate on the "chain" field. It's identical to ChainEQ.
func Chain(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldChain, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldPlatform, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldTag, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldStatus, v))
}

// Direction applies equality check predicate on the "direction" field. It's identical to DirectionEQ.
func Direction(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldDirection, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldIndex, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldUpdatedAt, v))
}

// FeedIDEQ applies the EQ predicate on the "feed_id" field.
func FeedIDEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldFeedID, v))
}

// FeedIDNEQ applies the NEQ predicate on the "feed_id" field.
func FeedIDNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldFeedID, v))
}

// FeedIDIn applies the In predicate on the "feed_id" field.
func FeedIDIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldFeedID, vs...))
}

// FeedIDNotIn applies the NotIn predicate on the "feed_id" field.
func FeedIDNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldFeedID, vs...))
}

// FeedIDGT applies the GT predicate on the "feed_id" field.
func FeedIDGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldFeedID, v))
}

// FeedIDGTE applies the GTE predicate on the "feed_id" field.
func FeedIDGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldFeedID, v))
}

// FeedIDLT applies the LT predicate on the "feed_id" field.
func FeedIDLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldFeedID, v))
}

// FeedIDLTE applies the LTE predicate on the "feed_id" field.
func FeedIDLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldFeedID, v))
}

// FeedIDContains applies the Contains predicate on the "feed_id" field.
func FeedIDContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldFeedID, v))
}

// FeedIDHasPrefix applies the HasPrefix predicate on the "feed_id" field.
func FeedIDHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldFeedID, v))
}

// FeedIDHasSuffix applies the HasSuffix predicate on the "feed_id" field.
func FeedIDHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldFeedID, v))
}

// FeedIDEqualFold applies the EqualFold predicate on the "feed_id" field.
func FeedIDEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldFeedID, v))
}

// FeedIDContainsFold applies the ContainsFold predicate on the "feed_id" field.
func FeedIDContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldFeedID, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldOwner, v))
}

// ChainEQ applies the EQ predicate on the "chain" field.
func ChainEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldChain, v))
}

// ChainNEQ applies the NEQ predicate on the "chain" field.
func ChainNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldChain, v))
}

// ChainIn applies the In predicate on the "chain" field.
func ChainIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldChain, vs...))
}

// ChainNotIn applies the NotIn predicate on the "chain" field.
func ChainNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldChain, vs...))
}

// ChainGT applies the GT predicate on the "chain" field.
func ChainGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldChain, v))
}

// ChainGTE applies the GTE predicate on the "chain" field.
func ChainGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldChain, v))
}

// ChainLT applies the LT predicate on the "chain" field.
func ChainLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldChain, v))
}

// ChainLTE applies the LTE predicate on the "chain" field.
func ChainLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldChain, v))
}

// ChainContains applies the Contains predicate on the "chain" field.
func ChainContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldChain, v))
}

// ChainHasPrefix applies the HasPrefix predicate on the "chain" field.
func ChainHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldChain, v))
}

// ChainHasSuffix applies the HasSuffix predicate on the "chain" field.
func ChainHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldChain, v))
}

// ChainEqualFold applies the EqualFold predicate on the "chain" field.
func ChainEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldChain, v))
}

// ChainContainsFold applies the ContainsFold predicate on the "chain" field.
func ChainContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldChain, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldPlatform, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldTag, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldStatus, v))
}

// DirectionEQ applies the EQ predicate on the "direction" field.
func DirectionEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldDirection, v))
}

// DirectionNEQ applies the NEQ predicate on the "direction" field.
func DirectionNEQ(v string) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldDirection, v))
}

// DirectionIn applies the In predicate on the "direction" field.
func DirectionIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldDirection, vs...))
}

// DirectionNotIn applies the NotIn predicate on the "direction" field.
func DirectionNotIn(vs ...string) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldDirection, vs...))
}

// DirectionGT applies the GT predicate on the "direction" field.
func DirectionGT(v string) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldDirection, v))
}

// DirectionGTE applies the GTE predicate on the "direction" field.
func DirectionGTE(v string) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldDirection, v))
}

// DirectionLT applies the LT predicate on the "direction" field.
func DirectionLT(v string) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldDirection, v))
}

// DirectionLTE applies the LTE predicate on the "direction" field.
func DirectionLTE(v string) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldDirection, v))
}

// DirectionContains applies the Contains predicate on the "direction" field.
func DirectionContains(v string) predicate.Index {
	return predicate.Index(sql.FieldContains(FieldDirection, v))
}

// DirectionHasPrefix applies the HasPrefix predicate on the "direction" field.
func DirectionHasPrefix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasPrefix(FieldDirection, v))
}

// DirectionHasSuffix applies the HasSuffix predicate on the "direction" field.
func DirectionHasSuffix(v string) predicate.Index {
	return predicate.Index(sql.FieldHasSuffix(FieldDirection, v))
}

// DirectionEqualFold applies the EqualFold predicate on the "direction" field.
func DirectionEqualFold(v string) predicate.Index {
	return predicate.Index(sql.FieldEqualFold(FieldDirection, v))
}

// DirectionContainsFold applies the ContainsFold predicate on the "direction" field.
func DirectionContainsFold(v string) predicate.Index {
	return predicate.Index(sql.FieldContainsFold(FieldDirection, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldIndex, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Index {
	return predicate.Index(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Index {
	return predicate.Index(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Index) predicate.Index {
	return predicate.Index(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Index) predicate.Index {
	return predicate.Index(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Index) predicate.Index {
	return predicate.Index(sql.NotPredicates(p))
}
