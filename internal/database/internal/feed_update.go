// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/naturalselectionlabs/rss3-node/internal/database/internal/feed"
	"github.com/naturalselectionlabs/rss3-node/internal/database/internal/predicate"
	"github.com/naturalselectionlabs/rss3-node/schema"
	"github.com/shopspring/decimal"
)

// FeedUpdate is the builder for updating Feed entities.
type FeedUpdate struct {
	config
	hooks    []Hook
	mutation *FeedMutation
}

// Where appends a list predicates to the FeedUpdate builder.
func (fu *FeedUpdate) Where(ps ...predicate.Feed) *FeedUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetChain sets the "chain" field.
func (fu *FeedUpdate) SetChain(s string) *FeedUpdate {
	fu.mutation.SetChain(s)
	return fu
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableChain(s *string) *FeedUpdate {
	if s != nil {
		fu.SetChain(*s)
	}
	return fu
}

// SetPlatform sets the "platform" field.
func (fu *FeedUpdate) SetPlatform(s string) *FeedUpdate {
	fu.mutation.SetPlatform(s)
	return fu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (fu *FeedUpdate) SetNillablePlatform(s *string) *FeedUpdate {
	if s != nil {
		fu.SetPlatform(*s)
	}
	return fu
}

// SetFrom sets the "from" field.
func (fu *FeedUpdate) SetFrom(s string) *FeedUpdate {
	fu.mutation.SetFrom(s)
	return fu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableFrom(s *string) *FeedUpdate {
	if s != nil {
		fu.SetFrom(*s)
	}
	return fu
}

// SetTo sets the "to" field.
func (fu *FeedUpdate) SetTo(s string) *FeedUpdate {
	fu.mutation.SetTo(s)
	return fu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableTo(s *string) *FeedUpdate {
	if s != nil {
		fu.SetTo(*s)
	}
	return fu
}

// SetTag sets the "tag" field.
func (fu *FeedUpdate) SetTag(s string) *FeedUpdate {
	fu.mutation.SetTag(s)
	return fu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableTag(s *string) *FeedUpdate {
	if s != nil {
		fu.SetTag(*s)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FeedUpdate) SetType(s string) *FeedUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableType(s *string) *FeedUpdate {
	if s != nil {
		fu.SetType(*s)
	}
	return fu
}

// SetStatus sets the "status" field.
func (fu *FeedUpdate) SetStatus(s string) *FeedUpdate {
	fu.mutation.SetStatus(s)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableStatus(s *string) *FeedUpdate {
	if s != nil {
		fu.SetStatus(*s)
	}
	return fu
}

// SetIndex sets the "index" field.
func (fu *FeedUpdate) SetIndex(u uint) *FeedUpdate {
	fu.mutation.ResetIndex()
	fu.mutation.SetIndex(u)
	return fu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableIndex(u *uint) *FeedUpdate {
	if u != nil {
		fu.SetIndex(*u)
	}
	return fu
}

// AddIndex adds u to the "index" field.
func (fu *FeedUpdate) AddIndex(u int) *FeedUpdate {
	fu.mutation.AddIndex(u)
	return fu
}

// SetTotalActions sets the "total_actions" field.
func (fu *FeedUpdate) SetTotalActions(u uint) *FeedUpdate {
	fu.mutation.ResetTotalActions()
	fu.mutation.SetTotalActions(u)
	return fu
}

// SetNillableTotalActions sets the "total_actions" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableTotalActions(u *uint) *FeedUpdate {
	if u != nil {
		fu.SetTotalActions(*u)
	}
	return fu
}

// AddTotalActions adds u to the "total_actions" field.
func (fu *FeedUpdate) AddTotalActions(u int) *FeedUpdate {
	fu.mutation.AddTotalActions(u)
	return fu
}

// SetActions sets the "actions" field.
func (fu *FeedUpdate) SetActions(s []schema.Action) *FeedUpdate {
	fu.mutation.SetActions(s)
	return fu
}

// AppendActions appends s to the "actions" field.
func (fu *FeedUpdate) AppendActions(s []schema.Action) *FeedUpdate {
	fu.mutation.AppendActions(s)
	return fu
}

// SetFeeValue sets the "fee_value" field.
func (fu *FeedUpdate) SetFeeValue(d decimal.Decimal) *FeedUpdate {
	fu.mutation.SetFeeValue(d)
	return fu
}

// SetNillableFeeValue sets the "fee_value" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableFeeValue(d *decimal.Decimal) *FeedUpdate {
	if d != nil {
		fu.SetFeeValue(*d)
	}
	return fu
}

// SetFeeToken sets the "fee_token" field.
func (fu *FeedUpdate) SetFeeToken(s string) *FeedUpdate {
	fu.mutation.SetFeeToken(s)
	return fu
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableFeeToken(s *string) *FeedUpdate {
	if s != nil {
		fu.SetFeeToken(*s)
	}
	return fu
}

// SetTimestamp sets the "timestamp" field.
func (fu *FeedUpdate) SetTimestamp(t time.Time) *FeedUpdate {
	fu.mutation.SetTimestamp(t)
	return fu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableTimestamp(t *time.Time) *FeedUpdate {
	if t != nil {
		fu.SetTimestamp(*t)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FeedUpdate) SetCreatedAt(t time.Time) *FeedUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FeedUpdate) SetNillableCreatedAt(t *time.Time) *FeedUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeedUpdate) SetUpdatedAt(t time.Time) *FeedUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// Mutation returns the FeedMutation object of the builder.
func (fu *FeedUpdate) Mutation() *FeedMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeedUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := feed.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeedUpdate) check() error {
	if v, ok := fu.mutation.Chain(); ok {
		if err := feed.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`internal: validator failed for field "Feed.chain": %w`, err)}
		}
	}
	if v, ok := fu.mutation.From(); ok {
		if err := feed.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`internal: validator failed for field "Feed.from": %w`, err)}
		}
	}
	if v, ok := fu.mutation.To(); ok {
		if err := feed.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`internal: validator failed for field "Feed.to": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Tag(); ok {
		if err := feed.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`internal: validator failed for field "Feed.tag": %w`, err)}
		}
	}
	if v, ok := fu.mutation.GetType(); ok {
		if err := feed.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`internal: validator failed for field "Feed.type": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Status(); ok {
		if err := feed.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`internal: validator failed for field "Feed.status": %w`, err)}
		}
	}
	return nil
}

func (fu *FeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(feed.Table, feed.Columns, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Chain(); ok {
		_spec.SetField(feed.FieldChain, field.TypeString, value)
	}
	if value, ok := fu.mutation.Platform(); ok {
		_spec.SetField(feed.FieldPlatform, field.TypeString, value)
	}
	if value, ok := fu.mutation.From(); ok {
		_spec.SetField(feed.FieldFrom, field.TypeString, value)
	}
	if value, ok := fu.mutation.To(); ok {
		_spec.SetField(feed.FieldTo, field.TypeString, value)
	}
	if value, ok := fu.mutation.Tag(); ok {
		_spec.SetField(feed.FieldTag, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(feed.FieldType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(feed.FieldStatus, field.TypeString, value)
	}
	if value, ok := fu.mutation.Index(); ok {
		_spec.SetField(feed.FieldIndex, field.TypeUint, value)
	}
	if value, ok := fu.mutation.AddedIndex(); ok {
		_spec.AddField(feed.FieldIndex, field.TypeUint, value)
	}
	if value, ok := fu.mutation.TotalActions(); ok {
		_spec.SetField(feed.FieldTotalActions, field.TypeUint, value)
	}
	if value, ok := fu.mutation.AddedTotalActions(); ok {
		_spec.AddField(feed.FieldTotalActions, field.TypeUint, value)
	}
	if value, ok := fu.mutation.Actions(); ok {
		_spec.SetField(feed.FieldActions, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feed.FieldActions, value)
		})
	}
	if value, ok := fu.mutation.FeeValue(); ok {
		_spec.SetField(feed.FieldFeeValue, field.TypeOther, value)
	}
	if value, ok := fu.mutation.FeeToken(); ok {
		_spec.SetField(feed.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := fu.mutation.Timestamp(); ok {
		_spec.SetField(feed.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedUpdateOne is the builder for updating a single Feed entity.
type FeedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedMutation
}

// SetChain sets the "chain" field.
func (fuo *FeedUpdateOne) SetChain(s string) *FeedUpdateOne {
	fuo.mutation.SetChain(s)
	return fuo
}

// SetNillableChain sets the "chain" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableChain(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetChain(*s)
	}
	return fuo
}

// SetPlatform sets the "platform" field.
func (fuo *FeedUpdateOne) SetPlatform(s string) *FeedUpdateOne {
	fuo.mutation.SetPlatform(s)
	return fuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillablePlatform(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetPlatform(*s)
	}
	return fuo
}

// SetFrom sets the "from" field.
func (fuo *FeedUpdateOne) SetFrom(s string) *FeedUpdateOne {
	fuo.mutation.SetFrom(s)
	return fuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableFrom(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetFrom(*s)
	}
	return fuo
}

// SetTo sets the "to" field.
func (fuo *FeedUpdateOne) SetTo(s string) *FeedUpdateOne {
	fuo.mutation.SetTo(s)
	return fuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableTo(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetTo(*s)
	}
	return fuo
}

// SetTag sets the "tag" field.
func (fuo *FeedUpdateOne) SetTag(s string) *FeedUpdateOne {
	fuo.mutation.SetTag(s)
	return fuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableTag(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetTag(*s)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FeedUpdateOne) SetType(s string) *FeedUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableType(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetType(*s)
	}
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FeedUpdateOne) SetStatus(s string) *FeedUpdateOne {
	fuo.mutation.SetStatus(s)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableStatus(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetStatus(*s)
	}
	return fuo
}

// SetIndex sets the "index" field.
func (fuo *FeedUpdateOne) SetIndex(u uint) *FeedUpdateOne {
	fuo.mutation.ResetIndex()
	fuo.mutation.SetIndex(u)
	return fuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableIndex(u *uint) *FeedUpdateOne {
	if u != nil {
		fuo.SetIndex(*u)
	}
	return fuo
}

// AddIndex adds u to the "index" field.
func (fuo *FeedUpdateOne) AddIndex(u int) *FeedUpdateOne {
	fuo.mutation.AddIndex(u)
	return fuo
}

// SetTotalActions sets the "total_actions" field.
func (fuo *FeedUpdateOne) SetTotalActions(u uint) *FeedUpdateOne {
	fuo.mutation.ResetTotalActions()
	fuo.mutation.SetTotalActions(u)
	return fuo
}

// SetNillableTotalActions sets the "total_actions" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableTotalActions(u *uint) *FeedUpdateOne {
	if u != nil {
		fuo.SetTotalActions(*u)
	}
	return fuo
}

// AddTotalActions adds u to the "total_actions" field.
func (fuo *FeedUpdateOne) AddTotalActions(u int) *FeedUpdateOne {
	fuo.mutation.AddTotalActions(u)
	return fuo
}

// SetActions sets the "actions" field.
func (fuo *FeedUpdateOne) SetActions(s []schema.Action) *FeedUpdateOne {
	fuo.mutation.SetActions(s)
	return fuo
}

// AppendActions appends s to the "actions" field.
func (fuo *FeedUpdateOne) AppendActions(s []schema.Action) *FeedUpdateOne {
	fuo.mutation.AppendActions(s)
	return fuo
}

// SetFeeValue sets the "fee_value" field.
func (fuo *FeedUpdateOne) SetFeeValue(d decimal.Decimal) *FeedUpdateOne {
	fuo.mutation.SetFeeValue(d)
	return fuo
}

// SetNillableFeeValue sets the "fee_value" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableFeeValue(d *decimal.Decimal) *FeedUpdateOne {
	if d != nil {
		fuo.SetFeeValue(*d)
	}
	return fuo
}

// SetFeeToken sets the "fee_token" field.
func (fuo *FeedUpdateOne) SetFeeToken(s string) *FeedUpdateOne {
	fuo.mutation.SetFeeToken(s)
	return fuo
}

// SetNillableFeeToken sets the "fee_token" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableFeeToken(s *string) *FeedUpdateOne {
	if s != nil {
		fuo.SetFeeToken(*s)
	}
	return fuo
}

// SetTimestamp sets the "timestamp" field.
func (fuo *FeedUpdateOne) SetTimestamp(t time.Time) *FeedUpdateOne {
	fuo.mutation.SetTimestamp(t)
	return fuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableTimestamp(t *time.Time) *FeedUpdateOne {
	if t != nil {
		fuo.SetTimestamp(*t)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FeedUpdateOne) SetCreatedAt(t time.Time) *FeedUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FeedUpdateOne) SetNillableCreatedAt(t *time.Time) *FeedUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeedUpdateOne) SetUpdatedAt(t time.Time) *FeedUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// Mutation returns the FeedMutation object of the builder.
func (fuo *FeedUpdateOne) Mutation() *FeedMutation {
	return fuo.mutation
}

// Where appends a list predicates to the FeedUpdate builder.
func (fuo *FeedUpdateOne) Where(ps ...predicate.Feed) *FeedUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedUpdateOne) Select(field string, fields ...string) *FeedUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feed entity.
func (fuo *FeedUpdateOne) Save(ctx context.Context) (*Feed, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedUpdateOne) SaveX(ctx context.Context) *Feed {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeedUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := feed.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeedUpdateOne) check() error {
	if v, ok := fuo.mutation.Chain(); ok {
		if err := feed.ChainValidator(v); err != nil {
			return &ValidationError{Name: "chain", err: fmt.Errorf(`internal: validator failed for field "Feed.chain": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.From(); ok {
		if err := feed.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`internal: validator failed for field "Feed.from": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.To(); ok {
		if err := feed.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`internal: validator failed for field "Feed.to": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Tag(); ok {
		if err := feed.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`internal: validator failed for field "Feed.tag": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.GetType(); ok {
		if err := feed.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`internal: validator failed for field "Feed.type": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Status(); ok {
		if err := feed.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`internal: validator failed for field "Feed.status": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeedUpdateOne) sqlSave(ctx context.Context) (_node *Feed, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(feed.Table, feed.Columns, sqlgraph.NewFieldSpec(feed.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`internal: missing "Feed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feed.FieldID)
		for _, f := range fields {
			if !feed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("internal: invalid field %q for query", f)}
			}
			if f != feed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Chain(); ok {
		_spec.SetField(feed.FieldChain, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Platform(); ok {
		_spec.SetField(feed.FieldPlatform, field.TypeString, value)
	}
	if value, ok := fuo.mutation.From(); ok {
		_spec.SetField(feed.FieldFrom, field.TypeString, value)
	}
	if value, ok := fuo.mutation.To(); ok {
		_spec.SetField(feed.FieldTo, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Tag(); ok {
		_spec.SetField(feed.FieldTag, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(feed.FieldType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(feed.FieldStatus, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Index(); ok {
		_spec.SetField(feed.FieldIndex, field.TypeUint, value)
	}
	if value, ok := fuo.mutation.AddedIndex(); ok {
		_spec.AddField(feed.FieldIndex, field.TypeUint, value)
	}
	if value, ok := fuo.mutation.TotalActions(); ok {
		_spec.SetField(feed.FieldTotalActions, field.TypeUint, value)
	}
	if value, ok := fuo.mutation.AddedTotalActions(); ok {
		_spec.AddField(feed.FieldTotalActions, field.TypeUint, value)
	}
	if value, ok := fuo.mutation.Actions(); ok {
		_spec.SetField(feed.FieldActions, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feed.FieldActions, value)
		})
	}
	if value, ok := fuo.mutation.FeeValue(); ok {
		_spec.SetField(feed.FieldFeeValue, field.TypeOther, value)
	}
	if value, ok := fuo.mutation.FeeToken(); ok {
		_spec.SetField(feed.FieldFeeToken, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Timestamp(); ok {
		_spec.SetField(feed.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(feed.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feed.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Feed{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
