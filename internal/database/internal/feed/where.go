// Code generated by ent, DO NOT EDIT.

package feed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/naturalselectionlabs/rss3-node/internal/database/internal/predicate"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldID, id))
}

// Chain applies equality check predicate on the "chain" field. It's identical to ChainEQ.
func Chain(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldChain, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldPlatform, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTo, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTag, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldStatus, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldIndex, v))
}

// TotalActions applies equality check predicate on the "total_actions" field. It's identical to TotalActionsEQ.
func TotalActions(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTotalActions, v))
}

// FeeValue applies equality check predicate on the "fee_value" field. It's identical to FeeValueEQ.
func FeeValue(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFeeValue, v))
}

// FeeToken applies equality check predicate on the "fee_token" field. It's identical to FeeTokenEQ.
func FeeToken(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFeeToken, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTimestamp, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChainEQ applies the EQ predicate on the "chain" field.
func ChainEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldChain, v))
}

// ChainNEQ applies the NEQ predicate on the "chain" field.
func ChainNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldChain, v))
}

// ChainIn applies the In predicate on the "chain" field.
func ChainIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldChain, vs...))
}

// ChainNotIn applies the NotIn predicate on the "chain" field.
func ChainNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldChain, vs...))
}

// ChainGT applies the GT predicate on the "chain" field.
func ChainGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldChain, v))
}

// ChainGTE applies the GTE predicate on the "chain" field.
func ChainGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldChain, v))
}

// ChainLT applies the LT predicate on the "chain" field.
func ChainLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldChain, v))
}

// ChainLTE applies the LTE predicate on the "chain" field.
func ChainLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldChain, v))
}

// ChainContains applies the Contains predicate on the "chain" field.
func ChainContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldChain, v))
}

// ChainHasPrefix applies the HasPrefix predicate on the "chain" field.
func ChainHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldChain, v))
}

// ChainHasSuffix applies the HasSuffix predicate on the "chain" field.
func ChainHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldChain, v))
}

// ChainEqualFold applies the EqualFold predicate on the "chain" field.
func ChainEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldChain, v))
}

// ChainContainsFold applies the ContainsFold predicate on the "chain" field.
func ChainContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldChain, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldPlatform, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldTo, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldTag, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldStatus, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...uint) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...uint) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldIndex, v))
}

// TotalActionsEQ applies the EQ predicate on the "total_actions" field.
func TotalActionsEQ(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTotalActions, v))
}

// TotalActionsNEQ applies the NEQ predicate on the "total_actions" field.
func TotalActionsNEQ(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldTotalActions, v))
}

// TotalActionsIn applies the In predicate on the "total_actions" field.
func TotalActionsIn(vs ...uint) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldTotalActions, vs...))
}

// TotalActionsNotIn applies the NotIn predicate on the "total_actions" field.
func TotalActionsNotIn(vs ...uint) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldTotalActions, vs...))
}

// TotalActionsGT applies the GT predicate on the "total_actions" field.
func TotalActionsGT(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldTotalActions, v))
}

// TotalActionsGTE applies the GTE predicate on the "total_actions" field.
func TotalActionsGTE(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldTotalActions, v))
}

// TotalActionsLT applies the LT predicate on the "total_actions" field.
func TotalActionsLT(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldTotalActions, v))
}

// TotalActionsLTE applies the LTE predicate on the "total_actions" field.
func TotalActionsLTE(v uint) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldTotalActions, v))
}

// FeeValueEQ applies the EQ predicate on the "fee_value" field.
func FeeValueEQ(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFeeValue, v))
}

// FeeValueNEQ applies the NEQ predicate on the "fee_value" field.
func FeeValueNEQ(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldFeeValue, v))
}

// FeeValueIn applies the In predicate on the "fee_value" field.
func FeeValueIn(vs ...decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldFeeValue, vs...))
}

// FeeValueNotIn applies the NotIn predicate on the "fee_value" field.
func FeeValueNotIn(vs ...decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldFeeValue, vs...))
}

// FeeValueGT applies the GT predicate on the "fee_value" field.
func FeeValueGT(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldFeeValue, v))
}

// FeeValueGTE applies the GTE predicate on the "fee_value" field.
func FeeValueGTE(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldFeeValue, v))
}

// FeeValueLT applies the LT predicate on the "fee_value" field.
func FeeValueLT(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldFeeValue, v))
}

// FeeValueLTE applies the LTE predicate on the "fee_value" field.
func FeeValueLTE(v decimal.Decimal) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldFeeValue, v))
}

// FeeTokenEQ applies the EQ predicate on the "fee_token" field.
func FeeTokenEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldFeeToken, v))
}

// FeeTokenNEQ applies the NEQ predicate on the "fee_token" field.
func FeeTokenNEQ(v string) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldFeeToken, v))
}

// FeeTokenIn applies the In predicate on the "fee_token" field.
func FeeTokenIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldFeeToken, vs...))
}

// FeeTokenNotIn applies the NotIn predicate on the "fee_token" field.
func FeeTokenNotIn(vs ...string) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldFeeToken, vs...))
}

// FeeTokenGT applies the GT predicate on the "fee_token" field.
func FeeTokenGT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldFeeToken, v))
}

// FeeTokenGTE applies the GTE predicate on the "fee_token" field.
func FeeTokenGTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldFeeToken, v))
}

// FeeTokenLT applies the LT predicate on the "fee_token" field.
func FeeTokenLT(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldFeeToken, v))
}

// FeeTokenLTE applies the LTE predicate on the "fee_token" field.
func FeeTokenLTE(v string) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldFeeToken, v))
}

// FeeTokenContains applies the Contains predicate on the "fee_token" field.
func FeeTokenContains(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContains(FieldFeeToken, v))
}

// FeeTokenHasPrefix applies the HasPrefix predicate on the "fee_token" field.
func FeeTokenHasPrefix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasPrefix(FieldFeeToken, v))
}

// FeeTokenHasSuffix applies the HasSuffix predicate on the "fee_token" field.
func FeeTokenHasSuffix(v string) predicate.Feed {
	return predicate.Feed(sql.FieldHasSuffix(FieldFeeToken, v))
}

// FeeTokenEqualFold applies the EqualFold predicate on the "fee_token" field.
func FeeTokenEqualFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldEqualFold(FieldFeeToken, v))
}

// FeeTokenContainsFold applies the ContainsFold predicate on the "fee_token" field.
func FeeTokenContainsFold(v string) predicate.Feed {
	return predicate.Feed(sql.FieldContainsFold(FieldFeeToken, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldTimestamp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feed) predicate.Feed {
	return predicate.Feed(sql.NotPredicates(p))
}
