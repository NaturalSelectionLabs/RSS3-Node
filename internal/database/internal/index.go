// Code generated by ent, DO NOT EDIT.

package internal

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/naturalselectionlabs/rss3-node/internal/database/internal/index"
)

// Index is the model entity for the Index schema.
type Index struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"uuid"`
	// FeedID holds the value of the "feed_id" field.
	FeedID string `json:"id"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Chain holds the value of the "chain" field.
	Chain string `json:"chain,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Direction holds the value of the "direction" field.
	Direction string `json:"direction,omitempty"`
	// Index holds the value of the "index" field.
	Index uint `json:"index,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Index) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case index.FieldIndex:
			values[i] = new(sql.NullInt64)
		case index.FieldFeedID, index.FieldOwner, index.FieldChain, index.FieldPlatform, index.FieldTag, index.FieldType, index.FieldStatus, index.FieldDirection:
			values[i] = new(sql.NullString)
		case index.FieldTimestamp, index.FieldCreatedAt, index.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case index.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Index fields.
func (i *Index) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case index.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case index.FieldFeedID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_id", values[j])
			} else if value.Valid {
				i.FeedID = value.String
			}
		case index.FieldOwner:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[j])
			} else if value.Valid {
				i.Owner = value.String
			}
		case index.FieldChain:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain", values[j])
			} else if value.Valid {
				i.Chain = value.String
			}
		case index.FieldPlatform:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[j])
			} else if value.Valid {
				i.Platform = value.String
			}
		case index.FieldTag:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[j])
			} else if value.Valid {
				i.Tag = value.String
			}
		case index.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case index.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case index.FieldDirection:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field direction", values[j])
			} else if value.Valid {
				i.Direction = value.String
			}
		case index.FieldIndex:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[j])
			} else if value.Valid {
				i.Index = uint(value.Int64)
			}
		case index.FieldTimestamp:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[j])
			} else if value.Valid {
				i.Timestamp = value.Time
			}
		case index.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case index.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Index.
// This includes values selected through modifiers, order, etc.
func (i *Index) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Index.
// Note that you need to call Index.Unwrap() before calling this method if this Index
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Index) Update() *IndexUpdateOne {
	return NewIndexClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Index entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Index) Unwrap() *Index {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("internal: Index is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Index) String() string {
	var builder strings.Builder
	builder.WriteString("Index(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("feed_id=")
	builder.WriteString(i.FeedID)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(i.Owner)
	builder.WriteString(", ")
	builder.WriteString("chain=")
	builder.WriteString(i.Chain)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(i.Platform)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(i.Tag)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	builder.WriteString("direction=")
	builder.WriteString(i.Direction)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", i.Index))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(i.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Indexes is a parsable slice of Index.
type Indexes []*Index
