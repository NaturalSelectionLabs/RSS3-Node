// Code generated by "enumer --type=WorkerState --transform=snake --values --trimprefix=WorkerState --json --output worker_state.go"; DO NOT EDIT.

package engine

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _WorkerStateName = "indexingfailedready"

var _WorkerStateIndex = [...]uint8{0, 8, 14, 19}

const _WorkerStateLowerName = "indexingfailedready"

func (i WorkerState) String() string {
	i -= 1
	if i < 0 || i >= WorkerState(len(_WorkerStateIndex)-1) {
		return fmt.Sprintf("WorkerState(%d)", i+1)
	}
	return _WorkerStateName[_WorkerStateIndex[i]:_WorkerStateIndex[i+1]]
}

func (WorkerState) Values() []string {
	return WorkerStateStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WorkerStateNoOp() {
	var x [1]struct{}
	_ = x[Indexing-(1)]
	_ = x[Failed-(2)]
	_ = x[Ready-(3)]
}

var _WorkerStateValues = []WorkerState{Indexing, Failed, Ready}

var _WorkerStateNameToValueMap = map[string]WorkerState{
	_WorkerStateName[0:8]:        Indexing,
	_WorkerStateLowerName[0:8]:   Indexing,
	_WorkerStateName[8:14]:       Failed,
	_WorkerStateLowerName[8:14]:  Failed,
	_WorkerStateName[14:19]:      Ready,
	_WorkerStateLowerName[14:19]: Ready,
}

var _WorkerStateNames = []string{
	_WorkerStateName[0:8],
	_WorkerStateName[8:14],
	_WorkerStateName[14:19],
}

// WorkerStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkerStateString(s string) (WorkerState, error) {
	if val, ok := _WorkerStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WorkerStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WorkerState values", s)
}

// WorkerStateValues returns all values of the enum
func WorkerStateValues() []WorkerState {
	return _WorkerStateValues
}

// WorkerStateStrings returns a slice of all String values of the enum
func WorkerStateStrings() []string {
	strs := make([]string, len(_WorkerStateNames))
	copy(strs, _WorkerStateNames)
	return strs
}

// IsAWorkerState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WorkerState) IsAWorkerState() bool {
	for _, v := range _WorkerStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for WorkerState
func (i WorkerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for WorkerState
func (i *WorkerState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WorkerState should be a string, got %s", data)
	}

	var err error
	*i, err = WorkerStateString(s)
	return err
}
