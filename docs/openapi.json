{
  "openapi": "3.0.3",
  "info": {
    "title": "Node API",
    "description": "RSS3 Node API, data query services provided.",
    "version": "1.0.0"
  },
  "servers": [],
  "tags": [
    {
      "name": "RSS",
      "description": "Retrieve the details of RSS activities."
    },
    {
      "name": "Decentralized",
      "description": "Retrieve the details of decentralized activities."
    },
    {
      "name": "Federated",
      "description": "Retrieve the details of federated activities."
    }
  ],
  "paths": {
    "/decentralized/tx/{id}": {
      "get": {
        "operationId": "GetDecentralizedTxID",
        "summary": "Get Activity by ID",
        "description": "Retrieve details for the specified activity ID.",
        "tags": [
          "Decentralized"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_activity_id"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/decentralized/{account}": {
      "get": {
        "summary": "Get Account Activities",
        "description": "This endpoint retrieves the activities associated with a specified account in the decentralized system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
        "tags": [
          "Decentralized"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_account"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_network"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_platform_decentralized"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/decentralized/accounts": {
      "post": {
        "summary": "Batch Get Accounts Activities",
        "description": "Retrieve a batch of activities associated with multiple specified accounts in the decentralized system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
        "tags": [
          "Decentralized"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BatchGetDecentralizedAccountsActivities"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/decentralized/network/{network}": {
      "get": {
        "summary": "Get Network Activities",
        "description": "Retrieve a list of activities from the specified decentralized network. This endpoint allows you to filter activities by various parameters such as limit, timestamp, success status, and more.",
        "tags": [
          "Decentralized"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_network"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_platform_decentralized"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/decentralized/platform/{platform}": {
      "get": {
        "summary": "Get Platform Activities",
        "description": "Retrieve a list of activities from the specified decentralized platform. This endpoint allows you to filter activities by various parameters such as limit, timestamp, success status, and more.",
        "tags": [
          "Decentralized"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_platform_decentralized"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_network"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/federated/tx/{id}": {
      "get": {
        "operationId": "GetFederatedTxID",
        "summary": "Get Activity by ID",
        "description": "Retrieve details for the specified activity ID.",
        "tags": [
          "Federated"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_activity_id"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/federated/{account}": {
      "get": {
        "summary": "Get Account Activities",
        "description": "This endpoint retrieves the activities associated with a specified account in the federated system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
        "tags": [
          "Federated"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_account"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_network"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_platform_federated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/federated/accounts": {
      "post": {
        "summary": "Batch Get Accounts Activities",
        "description": "Retrieve a batch of activities associated with multiple specified accounts in the federated system. You can use various query parameters to filter and paginate the results, including limits on the number of activities and actions, timestamps, success status, direction, and more.",
        "tags": [
          "Federated"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BatchGetFederatedAccountsActivities"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/federated/network/{network}": {
      "get": {
        "summary": "Get Network Activities",
        "description": "Retrieve a list of activities from the specified federated network. This endpoint allows you to filter activities by various parameters such as limit, timestamp, success status, and more.",
        "tags": [
          "Federated"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_network"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_platform_federated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/federated/platform/{platform}": {
      "get": {
        "summary": "Get Platform Activities",
        "description": "Retrieve a list of activities from the specified federated platform. This endpoint allows you to filter activities by various parameters such as limit, timestamp, success status, and more.",
        "tags": [
          "Federated"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_platform_federated"
          },
          {
            "$ref": "#/components/parameters/query_limit"
          },
          {
            "$ref": "#/components/parameters/query_action_limit"
          },
          {
            "$ref": "#/components/parameters/query_cursor"
          },
          {
            "$ref": "#/components/parameters/query_since_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_until_timestamp"
          },
          {
            "$ref": "#/components/parameters/query_success"
          },
          {
            "$ref": "#/components/parameters/query_direction"
          },
          {
            "$ref": "#/components/parameters/query_tag"
          },
          {
            "$ref": "#/components/parameters/query_type"
          },
          {
            "$ref": "#/components/parameters/query_network"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/rss/{path}": {
      "get": {
        "operationId": "GetRSS",
        "summary": "Get RSS Activity by Path",
        "description": "Retrieve details from the specified RSS path.",
        "tags": [
          "RSS"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/path_rss"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RSSActivitiesResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/operators/workers_status": {
      "get": {
        "summary": "Get Node Worker Status",
        "description": "Retrieve node worker status details.",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WorkerInfoResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/operators/info": {
      "get": {
        "summary": "Get Node Status",
        "description": "Retrieve node status details.",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NodeInfoResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Get Node Operator Info",
        "description": "Retrieve node status details.",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "pattern": "This is an RSS3 Node operated by 0x[0-9a-fA-F]{40}."
                }
              }
            },
            "description": "Node status details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/networks/config": {
      "get": {
        "summary": "Get worker config options",
        "description": "Retrieve worker config options and descriptions.",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkConfigResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/activity_count": {
      "get": {
        "summary": "Get Node Activity Count",
        "description": "Retrieve node worker status details.",
        "tags": [
          "Info"
        ],
        "responses": {
          "200": {
            "description": "Activity count retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of activities.",
                      "example": 1242092608
                    },
                    "last_updated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The last time the activity count was updated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "path_activity_id": {
        "description": "Retrieve details for the specified activity ID",
        "example": "0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "query_action_limit": {
        "description": "Specify the number of actions within the activity to retrieve.",
        "example": "10",
        "in": "query",
        "name": "action_limit",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ActionLimit"
        }
      },
      "query_action_page": {
        "description": "Specify the pagination for actions",
        "example": 1,
        "in": "query",
        "name": "action_page",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ActionPage"
        }
      },
      "path_account": {
        "description": "Retrieve activities from the specified account.",
        "in": "path",
        "name": "account",
        "required": true,
        "schema": {
          "type": "string",
          "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
        }
      },
      "query_limit": {
        "description": "Specify the number of activities to retrieve.",
        "example": "20",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Limit"
        }
      },
      "query_cursor": {
        "description": "Specify the cursor used for pagination.",
        "in": "query",
        "name": "cursor",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Cursor"
        }
      },
      "query_since_timestamp": {
        "description": "Retrieve activities starting from this timestamp.",
        "in": "query",
        "name": "since_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Timestamp"
        }
      },
      "query_until_timestamp": {
        "description": "Retrieve activities up to this timestamp.",
        "in": "query",
        "name": "until_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Timestamp"
        }
      },
      "query_success": {
        "description": "Retrieve activities based on success status.",
        "in": "query",
        "name": "success",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Success"
        },
        "x-go-name": "Status"
      },
      "query_direction": {
        "description": "Retrieve activities based on direction.",
        "in": "query",
        "name": "direction",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/ProtocolDirection"
        }
      },
      "query_network": {
        "description": "Retrieve activities from the specified network(s).",
        "in": "query",
        "name": "network",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Networks"
        }
      },
      "query_tag": {
        "description": "Retrieve activities for the specified tag(s).",
        "in": "query",
        "name": "tag",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Tags"
        }
      },
      "query_type": {
        "description": "Retrieve activities for the specified type(s).",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Types"
        }
      },
      "query_platform_decentralized": {
        "description": "Retrieve activities from the specified platform(s).",
        "in": "query",
        "name": "platform",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/PlatformDecentralized"
          },
          "type": "array",
          "x-go-type-skip-optional-pointer": true
        }
      },
      "path_network": {
        "description": "Retrieve activities from the specified network.",
        "example": "ethereum",
        "in": "path",
        "name": "network",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ProtocolNetwork"
        }
      },
      "path_platform_decentralized": {
        "description": "Retrieve activities from the specified platform.",
        "example": "Uniswap",
        "in": "path",
        "name": "platform",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PlatformDecentralized"
        }
      },
      "query_platform_federated": {
        "description": "Retrieve activities from the specified platform(s).",
        "in": "query",
        "name": "platform",
        "required": false,
        "schema": {
          "items": {
            "$ref": "#/components/schemas/PlatformFederated"
          },
          "type": "array",
          "x-go-type-skip-optional-pointer": true
        }
      },
      "path_platform_federated": {
        "description": "Retrieve activities from the specified platform.",
        "example": "Uniswap",
        "in": "path",
        "name": "platform",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PlatformFederated"
        }
      },
      "path_rss": {
        "description": "Retrieve details for the specified RSS path",
        "example": "abc",
        "in": "path",
        "name": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "ActionLimit": {
        "type": "integer",
        "description": "Specify the number of actions within the activity to retrieve",
        "example": 10,
        "default": 10,
        "maximum": 20,
        "minimum": 1,
        "x-go-type-skip-optional-pointer": true
      },
      "ActionPage": {
        "default": 1,
        "minimum": 1,
        "type": "integer",
        "x-go-type-skip-optional-pointer": true
      },
      "Direction": {
        "type": "string",
        "enum": [
          "in",
          "out",
          "self"
        ],
        "x-go-type": "activityx.Direction",
        "x-go-type-import": {
          "name": "activityx",
          "path": "github.com/rss3-network/protocol-go/schema/activity"
        }
      },
      "ProtocolDirection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Direction"
          }
        ]
      },
      "Standard": {
        "type": "string",
        "enum": [
          "Unknown",
          "ERC-20",
          "ERC-165",
          "ERC-721",
          "ERC-1155",
          "ERC-1967",
          "NEP-141"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          },
          "decimals": {
            "type": "integer"
          },
          "parsed_image_url": {
            "type": "string"
          },
          "standard": {
            "$ref": "#/components/schemas/Standard"
          }
        }
      },
      "CollectibleApprovalAction": {
        "type": "string",
        "enum": [
          "approve",
          "revoke"
        ]
      },
      "CollectibleApproval": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object",
            "properties": {
              "action": {
                "$ref": "#/components/schemas/CollectibleApprovalAction"
              }
            },
            "required": [
              "action"
            ]
          }
        ]
      },
      "CollectibleAuctionAction": {
        "type": "string",
        "enum": [
          "create",
          "bid",
          "finalize",
          "cancel",
          "update",
          "invalidate"
        ]
      },
      "CollectibleAuction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "$ref": "#/components/schemas/CollectibleAuctionAction"
          },
          {
            "type": "object",
            "properties": {
              "cost": {
                "$ref": "#/components/schemas/Token"
              }
            }
          }
        ]
      },
      "CollectibleBurn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "CollectibleMint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "CollectibleTradeAction": {
        "type": "string",
        "enum": [
          "buy",
          "sell",
          "offer",
          "set",
          "create",
          "finalize"
        ]
      },
      "CollectibleTrade": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "$ref": "#/components/schemas/CollectibleTradeAction"
          },
          {
            "type": "object",
            "properties": {
              "cost": {
                "$ref": "#/components/schemas/Token"
              }
            }
          }
        ]
      },
      "CollectibleTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "ExchangeLiquidityAction": {
        "type": "string",
        "enum": [
          "add",
          "borrow",
          "collect",
          "remove",
          "repay",
          "supply",
          "withdraw"
        ]
      },
      "ExchangeLiquidity": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ExchangeLiquidityAction"
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "required": [
          "action",
          "tokens"
        ]
      },
      "ExchangeLoanAction": {
        "type": "string",
        "enum": [
          "create",
          "repay",
          "refinance",
          "liquidate",
          "seize"
        ]
      },
      "ExchangeLoan": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ExchangeLoanAction"
          },
          "collateral": {
            "$ref": "#/components/schemas/Token"
          },
          "amount": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "action",
          "collateral"
        ]
      },
      "ExchangeStakingAction": {
        "type": "string",
        "enum": [
          "stake",
          "unstake",
          "claim"
        ]
      },
      "ExchangeStaking": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ExchangeStakingAction"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "period": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "format": "date-time"
              },
              "end": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "start",
              "end"
            ]
          }
        },
        "required": [
          "action",
          "token"
        ]
      },
      "ExchangeSwap": {
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Token"
          },
          "to": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "type": "object"
      },
      "GovernanceProposal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "start_block": {
            "type": "string"
          },
          "end_block": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "link": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "GovernanceVoteAction": {
        "type": "string",
        "enum": [
          "for",
          "against",
          "abstain"
        ]
      },
      "GovernanceVote": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/GovernanceVoteAction"
          },
          "token": {
            "$ref": "#/components/schemas/GovernanceProposal"
          },
          "count": {
            "type": "integer"
          },
          "reason": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "token"
        ]
      },
      "MetaverseBurn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "MetaverseMint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "MetaverseTradeAction": {
        "type": "string",
        "enum": [
          "buy",
          "list",
          "sell"
        ]
      },
      "MetaverseTrade": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object",
            "properties": {
              "action": {
                "$ref": "#/components/schemas/MetaverseTradeAction"
              },
              "cost": {
                "$ref": "#/components/schemas/Token"
              }
            }
          }
        ]
      },
      "MetaverseTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "RSS": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pub_date": {
            "type": "string",
            "format": "date-time"
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Media": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          }
        }
      },
      "SocialPost": {
        "type": "object",
        "properties": {
          "handle": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Media"
            }
          },
          "profile_id": {
            "type": "string"
          },
          "publication_id": {
            "type": "string"
          },
          "content_uri": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "author_url": {
            "type": "string"
          },
          "reward": {
            "$ref": "#/components/schemas/Token"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "target": {
            "$ref": "#/components/schemas/SocialPost"
          },
          "target_url": {
            "type": "string"
          }
        }
      },
      "SocialComment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "SocialDelete": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "SocialMint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "SocialProfileAction": {
        "type": "string",
        "enum": [
          "create",
          "renew",
          "unwrap",
          "update",
          "wrap"
        ]
      },
      "SocialProfile": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/SocialProfileAction"
          },
          "profile_id": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "handle": {
            "type": "string"
          },
          "image_uri": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SocialProxyAction": {
        "type": "string",
        "enum": [
          "appoint",
          "remove"
        ]
      },
      "SocialProxy": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/SocialProxyAction"
          },
          "proxy_address": {
            "type": "string"
          },
          "profile": {
            "$ref": "#/components/schemas/SocialProfile"
          }
        }
      },
      "SocialRevise": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "SocialReward": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "SocialShare": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "type": "object"
          }
        ]
      },
      "TransactionApprovalAction": {
        "type": "string",
        "enum": [
          "approve",
          "revoke"
        ]
      },
      "Network": {
        "type": "string",
        "enum": [
          "unknown",
          "arbitrum",
          "arweave",
          "avax",
          "base",
          "binance-smart-chain",
          "bitcoin",
          "crossbell",
          "ethereum",
          "farcaster",
          "gnosis",
          "linea",
          "mastodon",
          "near",
          "optimism",
          "polygon",
          "rsshub",
          "savm",
          "vsl",
          "x-layer",
          "bluesky"
        ],
        "x-go-type": "network.Network",
        "x-go-type-import": {
          "path": "github.com/rss3-network/protocol-go/schema/network"
        }
      },
      "TransactionApproval": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/TransactionApprovalAction"
          },
          "source_network": {
            "$ref": "#/components/schemas/Network"
          },
          "target_network": {
            "$ref": "#/components/schemas/Network"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "TransactionBridgeAction": {
        "type": "string",
        "enum": [
          "deposit",
          "withdraw"
        ]
      },
      "TransactionBridge": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/TransactionBridgeAction"
          },
          "source_network": {
            "$ref": "#/components/schemas/Network"
          },
          "target_network": {
            "$ref": "#/components/schemas/Network"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        }
      },
      "TransactionBurn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "TransactionMint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "TransactionTransfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Token"
          },
          {
            "type": "object"
          }
        ]
      },
      "Metadata": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CollectibleApproval"
          },
          {
            "$ref": "#/components/schemas/CollectibleAuction"
          },
          {
            "$ref": "#/components/schemas/CollectibleBurn"
          },
          {
            "$ref": "#/components/schemas/CollectibleMint"
          },
          {
            "$ref": "#/components/schemas/CollectibleTrade"
          },
          {
            "$ref": "#/components/schemas/CollectibleTransfer"
          },
          {
            "$ref": "#/components/schemas/ExchangeLiquidity"
          },
          {
            "$ref": "#/components/schemas/ExchangeLoan"
          },
          {
            "$ref": "#/components/schemas/ExchangeStaking"
          },
          {
            "$ref": "#/components/schemas/ExchangeSwap"
          },
          {
            "$ref": "#/components/schemas/GovernanceProposal"
          },
          {
            "$ref": "#/components/schemas/GovernanceVote"
          },
          {
            "$ref": "#/components/schemas/MetaverseBurn"
          },
          {
            "$ref": "#/components/schemas/MetaverseMint"
          },
          {
            "$ref": "#/components/schemas/MetaverseTrade"
          },
          {
            "$ref": "#/components/schemas/MetaverseTransfer"
          },
          {
            "$ref": "#/components/schemas/RSS"
          },
          {
            "$ref": "#/components/schemas/SocialComment"
          },
          {
            "$ref": "#/components/schemas/SocialDelete"
          },
          {
            "$ref": "#/components/schemas/SocialMint"
          },
          {
            "$ref": "#/components/schemas/SocialPost"
          },
          {
            "$ref": "#/components/schemas/SocialProfile"
          },
          {
            "$ref": "#/components/schemas/SocialProxy"
          },
          {
            "$ref": "#/components/schemas/SocialRevise"
          },
          {
            "$ref": "#/components/schemas/SocialReward"
          },
          {
            "$ref": "#/components/schemas/SocialShare"
          },
          {
            "$ref": "#/components/schemas/TransactionApproval"
          },
          {
            "$ref": "#/components/schemas/TransactionBridge"
          },
          {
            "$ref": "#/components/schemas/TransactionBurn"
          },
          {
            "$ref": "#/components/schemas/TransactionMint"
          },
          {
            "$ref": "#/components/schemas/TransactionTransfer"
          }
        ]
      },
      "ProtocolMetadata": {
        "description": "Additional metadata related to the action.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Metadata"
          },
          {
            "x-go-type": "metadata.Metadata",
            "x-go-type-skip-optional-pointer": true,
            "x-go-type-import": {
              "path": "github.com/rss3-network/protocol-go/schema/metadata"
            }
          }
        ]
      },
      "PlatformDecentralized": {
        "type": "string",
        "enum": [
          "Unknown",
          "1inch",
          "AAVE",
          "Aavegotchi",
          "Arbitrum",
          "Base",
          "BendDAO",
          "Cow",
          "Crossbell",
          "Curve",
          "ENS",
          "Farcaster",
          "Highlight",
          "IQWiki",
          "KiwiStand",
          "Lens",
          "Lido",
          "Linea",
          "LiNEAR",
          "LooksRare",
          "Matters",
          "Mirror",
          "NearSocial",
          "Nouns",
          "OpenSea",
          "Optimism",
          "Paragraph",
          "Paraswap",
          "Polymarket",
          "RSS3",
          "Rainbow",
          "SAVM",
          "Stargate",
          "Uniswap",
          "VSL",
          "Zerion"
        ],
        "x-go-type": "decentralized.Platform",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/node/schema/worker/decentralized"
        }
      },
      "PlatformFederated": {
        "type": "string",
        "enum": [
          "Unknown",
          "Mastodon"
        ],
        "x-go-type": "federated.Platform",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/node/schema/worker/federated"
        }
      },
      "Platform": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PlatformDecentralized"
          },
          {
            "$ref": "#/components/schemas/PlatformFederated"
          }
        ]
      },
      "Tag": {
        "type": "string",
        "enum": [
          "unknown",
          "collectible",
          "exchange",
          "governance",
          "metaverse",
          "rss",
          "social",
          "transaction"
        ],
        "example": "exchange",
        "x-go-type": "tag.Tag",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/protocol-go/schema/tag"
        }
      },
      "ProtocolTag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Tag"
          }
        ]
      },
      "Exchange": {
        "type": "string",
        "enum": [
          "liquidity",
          "staking",
          "swap",
          "loan"
        ]
      },
      "Transaction": {
        "type": "string",
        "enum": [
          "approval",
          "bridge",
          "burn",
          "mint",
          "transfer"
        ]
      },
      "Social": {
        "type": "string",
        "enum": [
          "comment",
          "delete",
          "mint",
          "post",
          "profile",
          "proxy",
          "revise",
          "reward",
          "share"
        ]
      },
      "Collectible": {
        "type": "string",
        "enum": [
          "approval",
          "burn",
          "mint",
          "trade",
          "transfer",
          "auction"
        ]
      },
      "Unknown": {
        "type": "string",
        "enum": [
          "unknown"
        ]
      },
      "Metaverse": {
        "type": "string",
        "enum": [
          "burn",
          "mint",
          "trade",
          "transfer"
        ]
      },
      "RSSType": {
        "type": "string",
        "enum": [
          "feed"
        ]
      },
      "Governance": {
        "type": "string",
        "enum": [
          "proposal",
          "vote"
        ]
      },
      "Type": {
        "type": "string",
        "allOf": [
          {
            "$ref": "#/components/schemas/Exchange"
          },
          {
            "$ref": "#/components/schemas/Transaction"
          },
          {
            "$ref": "#/components/schemas/Social"
          },
          {
            "$ref": "#/components/schemas/Collectible"
          },
          {
            "$ref": "#/components/schemas/Unknown"
          },
          {
            "$ref": "#/components/schemas/Metaverse"
          },
          {
            "$ref": "#/components/schemas/RSSType"
          },
          {
            "$ref": "#/components/schemas/Governance"
          }
        ]
      },
      "ProtocolType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Type"
          },
          {
            "x-go-type": "schema.Type",
            "x-go-type-skip-optional-pointer": true,
            "x-go-type-import": {
              "path": "github.com/rss3-network/protocol-go/schema"
            }
          }
        ]
      },
      "Action": {
        "description": "Represents an individual action within an activity.",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/ProtocolDirection"
          },
          "metadata": {
            "$ref": "#/components/schemas/ProtocolMetadata"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "related_urls": {
            "description": "A list of URLs related to the action.",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "type": "array"
          },
          "tag": {
            "$ref": "#/components/schemas/ProtocolTag"
          },
          "to": {
            "$ref": "#/components/schemas/ProtocolDirection"
          },
          "type": {
            "$ref": "#/components/schemas/ProtocolType"
          }
        },
        "type": "object"
      },
      "Calldata": {
        "description": "Represents the call data associated with an activity.",
        "properties": {
          "function_hash": {
            "description": "The hash of the function called.",
            "type": "string"
          },
          "parsed_function": {
            "description": "The parsed function name.",
            "type": "string"
          },
          "raw": {
            "description": "The raw calldata.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fee": {
        "description": "Represents fee information for an activity.",
        "properties": {
          "address": {
            "description": "The address to which the fee is paid.",
            "type": "string"
          },
          "amount": {
            "description": "The amount of the fee.",
            "type": "string"
          },
          "decimal": {
            "description": "The decimal precision of the fee amount.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProtocolNetwork": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Network"
          }
        ]
      },
      "Timestamp": {
        "description": "The timestamp of when the activity occurred.",
        "type": "integer",
        "x-go-type": "uint64"
      },
      "Activity": {
        "example": {
          "actions": [
            {
              "from": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
              "metadata": {
                "address": "0x7964B6A8aE5a71409e7E17a5b2669903A27997Ac",
                "decimals": 18,
                "name": "PlayDoge",
                "standard": "ERC-20",
                "symbol": "PLAY",
                "value": "10000000000000000000000"
              },
              "related_urls": [
                "https://etherscan.io/tx/0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3"
              ],
              "tag": "transaction",
              "to": "0xefC5f77c5AD5DB85bc287E80d8c3B88c3f27662C",
              "type": "transfer"
            }
          ],
          "calldata": {
            "function_hash": "0x4022b75e"
          },
          "direction": "out",
          "fee": {
            "amount": "315699955320960",
            "decimal": 18
          },
          "from": "0xBAB4d1f27bAA7762a4d822B80C647F715922492f",
          "id": "0x840e42d573ebe1ff27a9e4914573b4e0518fcd685c7f9331d319abe854f780e3",
          "index": 0,
          "network": "ethereum",
          "owner": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
          "success": true,
          "tag": "transaction",
          "timestamp": 1718689727,
          "to": "0x7964B6A8aE5a71409e7E17a5b2669903A27997Ac",
          "total_actions": 10,
          "type": "transfer"
        },
        "properties": {
          "actions": {
            "description": "The list of actions within the activity.",
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "type": "array"
          },
          "calldata": {
            "$ref": "#/components/schemas/Calldata"
          },
          "direction": {
            "$ref": "#/components/schemas/ProtocolDirection"
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "from": {
            "$ref": "#/components/schemas/ProtocolDirection"
          },
          "id": {
            "description": "The unique identifier for the activity.",
            "type": "string"
          },
          "index": {
            "description": "The index of the activity in the list.",
            "type": "integer"
          },
          "network": {
            "$ref": "#/components/schemas/ProtocolNetwork"
          },
          "owner": {
            "description": "The owner of the activity.",
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "success": {
            "description": "Indicates whether the activity was successful.",
            "type": "boolean"
          },
          "tag": {
            "$ref": "#/components/schemas/ProtocolTag"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "to": {
            "$ref": "#/components/schemas/ProtocolDirection"
          },
          "total_actions": {
            "description": "The total number of actions within the activity.",
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/ProtocolType"
          }
        },
        "type": "object"
      },
      "MetaTotalPages": {
        "description": "Metadata indicating the total number of pages.",
        "properties": {
          "totalPages": {
            "description": "The total number of pages available.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "An error response.",
        "properties": {
          "code": {
            "description": "The error code.",
            "type": "integer"
          },
          "message": {
            "description": "The error message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Limit": {
        "type": "integer",
        "description": "Specify the number of activities to retrieve",
        "example": 20,
        "default": 100,
        "minimum": 1,
        "maximum": 100,
        "x-go-type-skip-optional-pointer": true
      },
      "Cursor": {
        "type": "string",
        "description": "Specify the cursor used for pagination"
      },
      "Success": {
        "type": "boolean",
        "description": "Retrieve activities based on success status",
        "x-go-name": "Status"
      },
      "Networks": {
        "items": {
          "$ref": "#/components/schemas/ProtocolNetwork"
        },
        "type": "array",
        "x-go-type-skip-optional-pointer": true
      },
      "Tags": {
        "description": "Retrieve activities for the specified tag(s)",
        "items": {
          "$ref": "#/components/schemas/ProtocolTag"
        },
        "type": "array",
        "x-go-type-skip-optional-pointer": true
      },
      "Types": {
        "items": {
          "$ref": "#/components/schemas/ProtocolType"
        },
        "type": "array",
        "x-go-type-skip-optional-pointer": true
      },
      "MetaCursor": {
        "description": "Metadata for paginated responses.",
        "properties": {
          "cursor": {
            "description": "The cursor for the next set of results.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActivitiesResponseBody": {
        "description": "The response structure for a list of activities.",
        "properties": {
          "data": {
            "description": "The list of activities.",
            "items": {
              "$ref": "#/components/schemas/Activity"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaCursor"
          }
        },
        "type": "object"
      },
      "Accounts": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$"
        },
        "description": "List of accounts to retrieve activities for",
        "x-go-type-skip-optional-pointer": true
      },
      "WorkerDecentralized": {
        "type": "string",
        "enum": [
          "aave",
          "aavegotchi",
          "arbitrum",
          "base",
          "benddao",
          "core",
          "cow",
          "crossbell",
          "curve",
          "ens",
          "highlight",
          "iqwiki",
          "kiwistand",
          "lens",
          "lido",
          "linea",
          "linear",
          "looksrare",
          "matters",
          "mirror",
          "momoka",
          "nearsocial",
          "nouns",
          "1inch",
          "opensea",
          "optimism",
          "paragraph",
          "paraswap",
          "polymarket",
          "rainbow",
          "rss3",
          "savm",
          "stargate",
          "uniswap",
          "vsl",
          "zerion"
        ],
        "x-go-type": "decentralized.Worker",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/node/schema/worker/decentralized"
        }
      },
      "WorkerFederated": {
        "type": "string",
        "enum": [
          "core"
        ],
        "x-go-type": "federated.Worker",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/node/schema/worker/federated"
        }
      },
      "Worker": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/WorkerDecentralized"
          },
          {
            "$ref": "#/components/schemas/WorkerFederated"
          }
        ]
      },
      "WorkerStatus": {
        "description": "The worker status.",
        "type": "string",
        "enum": [
          "Unknown",
          "Indexing",
          "Ready",
          "Unhealthy"
        ],
        "x-go-type": "worker.Status",
        "x-go-type-skip-optional-pointer": true,
        "x-go-type-import": {
          "path": "github.com/rss3-network/node/schema/worker"
        }
      },
      "WorkerProgress": {
        "type": "object",
        "properties": {
          "index_count": {
            "description": "The index count of worker.",
            "type": "integer"
          },
          "indexed_state": {
            "description": "The indexed state of worker.",
            "type": "integer"
          },
          "remote_state": {
            "description": "The remote state of worker.",
            "type": "integer"
          }
        }
      },
      "WorkerInfo": {
        "description": "The status of the worker.",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "worker_id": {
                "description": "The worker ID.",
                "type": "string"
              },
              "worker": {
                "$ref": "#/components/schemas/Worker"
              },
              "network": {
                "$ref": "#/components/schemas/ProtocolNetwork"
              },
              "tags": {
                "$ref": "#/components/schemas/Tags"
              },
              "platform": {
                "$ref": "#/components/schemas/Platform"
              },
              "status": {
                "$ref": "#/components/schemas/WorkerStatus"
              }
            }
          },
          {
            "$ref": "#/components/schemas/WorkerProgress"
          }
        ]
      },
      "ComponentInfo": {
        "example": {
          "decentralized": [
            {
              "index_count": 1174,
              "indexed_state": 20416808,
              "network": "ethereum",
              "platform": "VSL",
              "remote_state": 20416809,
              "status": "Ready",
              "tags": [
                "transaction"
              ],
              "worker": "vsl",
              "worker_id": "ethereum-core"
            },
            {
              "index_count": 2138457,
              "indexed_state": 59974383,
              "network": "polygon",
              "platform": "Curve",
              "remote_state": 59974392,
              "status": "Ready",
              "tags": [
                "exchange",
                "transaction"
              ],
              "worker": "curve",
              "worker_id": "polygon-curve"
            },
            {
              "index_count": 697886,
              "indexed_state": 1475385,
              "network": "arweave",
              "platform": "Mirror",
              "remote_state": 1475386,
              "status": "Ready",
              "tags": [
                "social"
              ],
              "worker": "mirror",
              "worker_id": "arweave-mirror"
            }
          ],
          "federated": [
            {
              "indexed_state": 0,
              "network": "mastodon",
              "platform": "mastodon",
              "remote_state": 0,
              "status": "Ready",
              "tags": [
                "social"
              ],
              "worker": "mastodon",
              "worker_id": "mastodon-core"
            }
          ],
          "rss": {
            "indexed_state": 0,
            "network": "rss",
            "platform": "Unknown",
            "remote_state": 0,
            "status": "Ready",
            "tags": [
              "rss"
            ],
            "worker": "rsshub"
          }
        },
        "properties": {
          "decentralized": {
            "description": "The decentralized worker status.",
            "items": {
              "$ref": "#/components/schemas/WorkerInfo"
            },
            "type": "array"
          },
          "federated": {
            "description": "The federated worker status.",
            "items": {
              "$ref": "#/components/schemas/WorkerInfo"
            },
            "type": "array"
          },
          "rss": {
            "$ref": "#/components/schemas/WorkerInfo"
          }
        },
        "type": "object"
      },
      "Reward": {
        "description": "The reward of node.",
        "properties": {
          "epoch": {
            "description": "The epoch of reward.",
            "type": "integer"
          },
          "operator_rewards": {
            "description": "The operator rewards of reward.",
            "type": "string"
          },
          "request_counts": {
            "description": "The request counts of reward.",
            "type": "string"
          },
          "staking_rewards": {
            "description": "The staking rewards of reward.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Records": {
        "description": "The records of node activities.",
        "properties": {
          "last_heartbeat": {
            "description": "The last heartbeat of node.",
            "type": "integer"
          },
          "recent_requests": {
            "description": "The recent requests of node.",
            "items": {
              "description": "The request to the node api.",
              "type": "string"
            },
            "type": "array"
          },
          "recent_rewards": {
            "description": "The recent rewards of node.",
            "items": {
              "$ref": "#/components/schemas/Reward"
            },
            "type": "array"
          },
          "slashed_tokens": {
            "description": "The slashed tokens of node.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "The git version info of node.",
        "properties": {
          "commit": {
            "description": "The git commit of node.",
            "type": "string"
          },
          "tag": {
            "description": "The git tag of node.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeInfo": {
        "example": {
          "coverage": 1,
          "operator": "0x3ac803030c0efc29c5f4864f544dfbf411c86c27",
          "parameters": "{\"network_tolerance\":{\"arbitrum\":1000,\"arweave\":100,\"avax\":100,\"base\":100,\"binance-smart-chain\":100,\"crossbell\":500,\"ethereum\":100,\"farcaster\":3600000,\"gnosis\":100,\"linea\":100,\"optimism\":100,\"polygon\":100,\"savm\":100,\"vsl\":100},\"network_start_block\":{\"arbitrum\":185724972,\"arweave\":1374360,\"avax\":42301570,\"base\":11216527,\"binance-smart-chain\":36563564,\"crossbell\":58846671,\"ethereum\":19334220,\"gnosis\":32695982,\"linea\":2591120,\"optimism\":116811812,\"polygon\":54103805,\"savm\":60741,\"vsl\":14192},\"network_core_worker_disk_space_per_month\":{\"arbitrum\":26,\"arweave\":0,\"avax\":0,\"base\":10,\"binance-smart-chain\":117,\"crossbell\":0,\"ethereum\":51,\"gnosis\":9,\"linea\":31,\"optimism\":25,\"polygon\":153,\"savm\":1,\"vsl\":1,\"farcaster\":50}}",
          "records": {
            "last_heartbeat": 1722222806,
            "recent_requests": [
              "/decentralized/0x74751E741a196Ea0dA2A5a2bD37AdFBC364ecE0b",
              "/decentralized/accounts"
            ],
            "recent_rewards": [
              {
                "epoch": 184,
                "operation_rewards": "0",
                "request_counts": "1464",
                "staking_rewards": "61566677110439209699134"
              },
              {
                "epoch": 183,
                "operation_rewards": "0",
                "request_counts": "1028",
                "staking_rewards": "61566670561038402335627"
              },
              {
                "epoch": 182,
                "operation_rewards": "0",
                "request_counts": "1028",
                "staking_rewards": "61566662342874148374381"
              },
              {
                "epoch": 181,
                "operation_rewards": "0",
                "request_counts": "488",
                "staking_rewards": "61566655779372426706676"
              },
              {
                "epoch": 180,
                "operation_rewards": "0",
                "request_counts": "488",
                "staking_rewards": "61566648792660016524299"
              },
              {
                "epoch": 179,
                "operation_rewards": "0",
                "request_counts": "0",
                "staking_rewards": "61566153707988192333335"
              },
              {
                "epoch": 178,
                "operation_rewards": "0",
                "request_counts": "140",
                "staking_rewards": "61563971158905216786644"
              },
              {
                "epoch": 177,
                "operation_rewards": "0",
                "request_counts": "56",
                "staking_rewards": "61563956191645848172624"
              },
              {
                "epoch": 176,
                "operation_rewards": "0",
                "request_counts": "48",
                "staking_rewards": "61563949144728300052868"
              },
              {
                "epoch": 175,
                "operation_rewards": "0",
                "request_counts": "20",
                "staking_rewards": "61563492485831412271309"
              }
            ],
            "slashed_tokens": "0"
          },
          "uptime": 249979,
          "version": {
            "commit": "000000",
            "tag": "0.0.0"
          }
        },
        "properties": {
          "coverage": {
            "description": "The supported worker list of the node.",
            "items": {
              "description": "The worker name.",
              "type": "string"
            },
            "type": "array"
          },
          "operator": {
            "description": "The operator evm address of the node.",
            "type": "string"
          },
          "parameters": {
            "description": "The current network parameters of the node.",
            "type": "string"
          },
          "records": {
            "$ref": "#/components/schemas/Records"
          },
          "uptime": {
            "description": "The total uptime of the node.",
            "type": "integer"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "NodeInfoData": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NodeInfo"
          }
        },
        "type": "object"
      },
      "ConfigDetail": {
        "properties": {
          "description": {
            "type": "string"
          },
          "is_required": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "is_required",
          "type",
          "value",
          "description"
        ],
        "type": "object"
      },
      "EndpointConfig": {
        "description": "The endpoint options and config details of the worker.",
        "properties": {
          "http2_disabled": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "http_headers": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "url": {
            "$ref": "#/components/schemas/ConfigDetail"
          }
        },
        "type": "object"
      },
      "MinimumResource": {
        "properties": {
          "cpu_core": {
            "format": "float",
            "type": "number"
          },
          "disk_space_in_gb": {
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "memory_in_gb": {
            "format": "float",
            "type": "number"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Authentication": {
        "properties": {
          "access_key": {
            "$ref": "#/components/schemas/ConfigDetail"
          }
        },
        "type": "object"
      },
      "Parameters": {
        "properties": {
          "api_key": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "authentication": {
            "$ref": "#/components/schemas/Authentication"
          },
          "block_batch_size": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "block_receipts_batch_size": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "block_start": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "block_target": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "concurrent_block_requests": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "relay_url_list": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "receipts_batch_size": {
            "$ref": "#/components/schemas/ConfigDetail"
          }
        },
        "type": "object"
      },
      "WorkerConfig": {
        "properties": {
          "endpoint": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "id": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "ipfs_gateways": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "minimum_resource": {
            "$ref": "#/components/schemas/MinimumResource"
          },
          "network": {
            "$ref": "#/components/schemas/ConfigDetail"
          },
          "parameters": {
            "$ref": "#/components/schemas/Parameters"
          },
          "worker": {
            "$ref": "#/components/schemas/ConfigDetail"
          }
        },
        "type": "object"
      },
      "NetworkConfigDetail": {
        "properties": {
          "endpoint_configs": {
            "$ref": "#/components/schemas/EndpointConfig"
          },
          "id": {
            "type": "string"
          },
          "worker_configs": {
            "items": {
              "$ref": "#/components/schemas/WorkerConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "The worker config details by source.",
        "properties": {
          "decentralized": {
            "items": {
              "$ref": "#/components/schemas/NetworkConfigDetail"
            },
            "type": "array"
          },
          "federated": {
            "items": {
              "$ref": "#/components/schemas/NetworkConfigDetail"
            },
            "type": "array"
          },
          "rss": {
            "properties": {
              "endpoint_configs": {
                "$ref": "#/components/schemas/EndpointConfig"
              },
              "id": {
                "type": "string"
              },
              "worker_configs": {
                "$ref": "#/components/schemas/WorkerConfig"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NetworkConfigData": {
        "example": {
          "data": {
            "http2_disabled": {
              "description": "Some endpoints may not support HTTP2, set this to true to disable HTTP2.",
              "is_required": false,
              "type": "bool",
              "value": null
            },
            "http_headers": {
              "description": "HTTP headers to be sent with requests to this endpoint.",
              "is_required": false,
              "type": "map[string]string",
              "value": null
            },
            "url": {
              "description": "The URL of the endpoint.",
              "is_required": true,
              "type": "url",
              "value": null
            }
          }
        },
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NetworkConfig"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "ActivityResponse": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Activity"
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaTotalPages"
                }
              },
              "type": "object"
            }
          }
        },
        "description": "The request was successful."
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The request is malformed or contains invalid parameters."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "The specified resource was not found."
      },
      "InternalError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "An internal server error occurred while processing the request."
      },
      "ActivitiesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActivitiesResponseBody"
            }
          }
        },
        "description": "The request was successful."
      },
      "RSSActivitiesResponse": {
        "content": {
          "application/json": {
            "example": {
              "data": [
                {
                  "actions": [
                    {
                      "from": "www.abc.net.au",
                      "metadata": {
                        "authors": [
                          {
                            "name": "Emma Wynne"
                          }
                        ],
                        "description": "<div><h2>In short:</h2><p>Nicheliving customer Cindy Richardson says she is overwhelmed with costs, including rent, mortgage and rates due to the long delays completing her house.</p><p>She has applied to access her superannuation on hardship grounds but was rejected.</p><h2>What's next?</h2><p>WA Commerce Minister Sue Ellery is in talks with the company about resolving the long completion delays many customers are facing.</p></div>\n",
                        "pub_date": "2024-07-02T04:13:38.000Z",
                        "title": "Cindy was supposed to be living in a new home by now. Instead she's facing bankruptcy"
                      },
                      "platform": "www.abc.net.au",
                      "related_urls": [
                        "https://www.abc.net.au/news/2024-07-02/nicheliving-home-building-delays-causing-hardship/104047810"
                      ],
                      "tag": "rss",
                      "to": "www.abc.net.au",
                      "type": "feed"
                    }
                  ],
                  "direction": "out",
                  "from": "www.abc.net.au",
                  "id": "https://www.abc.net.au/news/2024-07-02/nicheliving-home-building-delays-causing-hardship/104047810",
                  "index": 0,
                  "network": "rss",
                  "owner": "www.abc.net.au",
                  "success": false,
                  "tag": "rss",
                  "timestamp": 1719895289,
                  "to": "www.abc.net.au",
                  "total_actions": 1,
                  "type": "feed"
                }
              ]
            },
            "schema": {
              "$ref": "#/components/schemas/ActivitiesResponseBody"
            }
          }
        },
        "description": "The request was successful."
      },
      "WorkerInfoResponse": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ComponentInfo"
                }
              }
            }
          }
        },
        "description": "The request was successful."
      },
      "NodeInfoResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NodeInfoData"
            }
          }
        },
        "description": "The request was successful."
      },
      "NetworkConfigResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NetworkConfigData"
            }
          }
        },
        "description": "The request was successful."
      }
    },
    "requestBodies": {
      "BatchGetDecentralizedAccountsActivities": {
        "description": "Request body for batch retrieving activities for multiple accounts",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "$ref": "#/components/schemas/Accounts"
                },
                "limit": {
                  "$ref": "#/components/schemas/Limit"
                },
                "action_limit": {
                  "$ref": "#/components/schemas/ActionLimit"
                },
                "cursor": {
                  "$ref": "#/components/schemas/Cursor"
                },
                "since_timestamp": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "until_timestamp": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "success": {
                  "$ref": "#/components/schemas/Success"
                },
                "direction": {
                  "$ref": "#/components/schemas/ProtocolDirection"
                },
                "network": {
                  "$ref": "#/components/schemas/Networks"
                },
                "tag": {
                  "$ref": "#/components/schemas/Tags"
                },
                "type": {
                  "$ref": "#/components/schemas/Types"
                },
                "platform": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformDecentralized"
                  },
                  "description": "Retrieve activities from the specified platform(s)",
                  "x-go-type-skip-optional-pointer": true
                }
              }
            }
          }
        }
      },
      "BatchGetFederatedAccountsActivities": {
        "description": "Request body for batch retrieving activities for multiple accounts",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "accounts": {
                  "$ref": "#/components/schemas/Accounts"
                },
                "limit": {
                  "$ref": "#/components/schemas/Limit"
                },
                "action_limit": {
                  "$ref": "#/components/schemas/ActionLimit"
                },
                "cursor": {
                  "$ref": "#/components/schemas/Cursor"
                },
                "since_timestamp": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "until_timestamp": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "success": {
                  "$ref": "#/components/schemas/Success"
                },
                "direction": {
                  "$ref": "#/components/schemas/ProtocolDirection"
                },
                "network": {
                  "$ref": "#/components/schemas/Networks"
                },
                "tag": {
                  "$ref": "#/components/schemas/Tags"
                },
                "type": {
                  "$ref": "#/components/schemas/Types"
                },
                "platform": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlatformFederated"
                  },
                  "description": "Retrieve activities from the specified platform(s)",
                  "x-go-type-skip-optional-pointer": true
                }
              }
            }
          }
        }
      }
    }
  }
}